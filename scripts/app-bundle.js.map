{"version":3,"sources":["environment.ts","config/settings.ts","services/state.ts","model/serviceError.ts","model/attendee.ts","model/message.ts","model/user.ts","model/conversation.ts","services/helpers.ts","events/connectionStateChanged.ts","events/conversationJoined.ts","events/messageReceived.ts","events/userConnected.ts","events/userDisconnected.ts","services/chat.service.ts","model/provider.ts","services/login.service.ts","app.ts","main.ts","services/user.service.ts","components/contact-list.ts","events/conversationSelected.ts","services/conversation.service.ts","components/contact.ts","components/conversation-component.ts","components/conversation-list.ts","components/conversation-preview.ts","components/user-name.ts","model/changePassword.ts","model/manage-logins.ts","services/account.service.ts","pages/account.ts","pages/confirm.ts","services/notification.service.ts","pages/home.ts","pages/login.ts","resources/index.ts","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validate-binding-behavior.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validation-controller.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validator.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validate-trigger.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/property-info.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validation-error.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validation-controller-factory.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validation-errors-custom-attribute.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/validation-renderer-custom-attribute.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/rules.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/standard-validator.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/validation-messages.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/validation-parser.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/util.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/node_modules/aurelia-validation/dist/amd/implementation/validation-rules.js","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/app.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/css/site.css","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/contact-list.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/css/site.min.css","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/contact.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/conversation-component.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/conversation-list.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/conversation-preview.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/components/user-name.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/pages/account.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/pages/confirm.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/pages/home.html","C:/Users/olefebvre/Source/Repos/chatle.aurelia/src/pages/login.html"],"names":["Object","defineProperty","exports","value","debug","testing","apiBaseUrl","redirectPath","Settings","this","userAPI","convAPI","chatAPI","accountdAPI","State","ServiceError","Key","ErrorMessage","Attendee","userId","Message","User","Conversation","user","attendees","Array","push","attendee_1","id","messages","isInitiatedByUser","Helpers","state","location","window","prototype","getError","error","errors","content","se","e","Error","errorMessage","name","key","setConverationTitle","conversation","_this","title","forEach","attendee","userName","trim","getUrlParameter","replace","regex","RegExp","results","exec","search","undefined","decodeURIComponent","__decorate","aurelia_framework_1","autoinject","ConnectionStateChanged","ConversationJoined","MessageReceived","message","UserConnected","UserDisconnected","ConnectionState","ChatService","settings","ea","http","helpers","currentState","Disconnected","start","environment_1","default","hub","jQuery","connection","logging","url","chatHub","chat","client","userConnected","onUserConnected","userDisconnected","onUserDisconnected","messageReceived","onMessageReceived","joinConversation","onJoinConversation","stateChanged","change","oldState","newState","signalR","connectionState","console","log","reconnected","onReconnected","onError","disconnected","onDisconnected","Promise","resolve","reject","done","setConnectionState","Connected","fail","stop","publish","connectionStateChanged_1","userConnected_1","userDisconnected_1","messageReceived_1","conversationJoined_1","Provider","LoginService","chatService","getXhrf","clearCookies","get","then","setXhrf","catch","xhrf","login","isGuess","r","loginAsGuess","logoff","post","exists","encodeURIComponent","response","manageError","confirm","put","logged","sessionStorage","setItem","getExternalLoginProviders","configure","builder","withHeader","exception","App","service","withBaseUrl","withCredentials","getItem","configureRouter","config","router","addPipelineStep","AuthorizeStep","route","moduleId","anomymous","account","home","map","handleUnknownRoutes","instruction","provider","action","history","replaceState","mapUnknownRoutes","attached","subscribe","setIsConnected","navigateToRoute","isConnected","manage","currentInstruction","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","cancel","aurelia_router_1","Redirect","aurelia","use","standardConfiguration","feature","plugin","developmentLogging","setRoot","LogManager","addAppender","aurelia_logging_console_1","ConsoleAppender","setLevel","logLevel","warnings","wForgottenReturn","UserService","getUsers","data","users","ContactList","userService","loadingMessage","connectionStateChangeSubscription","chat_service_1","getUser","detached","dispose","userConnectedSubscription","userDisconnectedSubscription","removeUser","unshift","u","index","indexOf","splice","ConversationSelected","ConversationService","showConversation","fragment","currentConversation","conversationSelected_1","sendMessage","m","message_1","conversationId","from","text","to","a","getConversations","conversations","c","Contact","select","isCurrentUser","conversation_1","conversationSelectedSubscription","conv","isSelected","length","bindable","ConversationComponent","activate","params","routeConfig","navModel","setTitle","ConversationList","connectionStateSubscription","Unsubscribe","conversationJoinedSubscription","isRemoved","ConversationPreview","lastMessage","messageReceivedSubscription","UserName","controllerFactory","controller","createForCurrentScope","validateTrigger","userNameAvailable","defaultBindingMode","bindingMode","twoWay","customElement","aurelia_validation_1","ValidationRules","ensure","satisfies","obj","withMessage","satisfiesRule","on","ChangePassword","UserLogiAuthenticationDescriptionnInfo","UserLoginInfo","ManageLogins","AccountService","getLogins","resove","removeLogin","loginProvider","providerKey","delete","Account","accountService","loginService","externalLinkLogin","protocol","host","remove","currentLogins","logins","findIndex","manage_logins_1","authenticationScheme","displayName","otherLogins","token","Confirm","validate","NotificationService","Notification","permission","listen","requestPermission","subscription","option","body","icon","n","onclick","Home","notification","notification_service_1","setIsDisconnected","isDisconnected","Login","externalLogin","t","providers","define","require","aurelia_dependency_injection_1","aurelia_pal_1","aurelia_task_queue_1","validation_controller_1","validate_trigger_1","ValidateBindingBehavior","taskQueue","getTarget","binding","view","target","Element","ii","controllers","viewModel","element","container","DOM","sourceExpression","bind","source","rulesOrController","rules","ValidationController","Optional","of","registerBinding","validationController","standardUpdateSource","updateSource","validateBinding","blur","validateBlurHandler","queueMicroTask","validateTarget","addEventListener","manual","standardUpdateTarget","updateTarget","resetBinding","unbind","removeEventListener","unregisterBinding","inject","TaskQueue","validator_1","property_info_1","validation_error_1","validator","bindings","Map","renderers","validating","elements","objects","finishValidating","addObject","object","set","removeObject","processErrorDelta","filter","addError","propertyName","ValidationError","removeError","addRenderer","renderer","render","kind","unrender","removeRenderer","getInstructionPredicate","predicate_1","object_1","propertyName_1","rules_1","x","rule","execute","object_2","propertyName_2","rules_2","validateObject","validateProperty","promises","_i","_a","_b","_c","_d","_e","_f","getPropertyInfo","has","all","errorSets","reduce","b","concat","result","newErrors","predicate","oldErrors","reset","getAssociatedElements","o","p","slice","_loop_1","oldError","this_1","newErrorIndex","newError","elements_1","oldErrors_1","newErrors_1","isBound","registeredBinding","Validator","aurelia_binding_1","getObject","expression","objectExpression","evaluate","originalExpression","BindingBehavior","ValueConverter","AccessScope","bindingContext","AccessMember","AccessKeyed","nextId","toString","ValidationControllerFactory","create","invoke","registerInstance","decorators","desc","d","arguments","getOwnPropertyDescriptor","Reflect","decorate","aurelia_templating_1","ValidationErrorsCustomAttribute","boundaryElement","controllerAccessor","sort","targets","compareDocumentPosition","interestingElements","contains","Lazy","customAttribute","ValidationRendererCustomAttribute","created","Rules","Function","enumerable","configurable","writable","unset","__extends","__","constructor","hasOwnProperty","validation_messages_1","StandardValidator","_super","messageProvider","resources","call","lookupFunctions","getDisplayName","getMessage","messageKey","property","overrideContext","$displayName","$propertyName","$value","$object","$config","$getDisplayName","validateAllProperties","when","promiseOrBoolean","condition","isValid","ValidationMessageProvider","ViewResources","validation_parser_1","validationMessages","required","matches","email","minLength","maxLength","minItems","maxItems","equals","parser","parseMessage","words","split","join","charAt","toUpperCase","ValidationParser","util_1","bindinqLanguage","emptyStringExpression","LiteralString","nullExpression","LiteralPrimitive","undefinedExpression","cache","coalesce","part","Conditional","Binary","CallMember","parts","parseInterpolation","MessageExpressionValidator","getAccessorExpression","fn","classic","arrow","match","parse","parseProperty","accessor","isString","Parser","BindingLanguage","originalMessage","visitor","accept","visitAccessScope","access","ancestor","getLogger","warn","Unparser","FluentRuleCustomizer","fluentEnsure","fluentRules","withMessageKey","tag","subject","ensureObject","args","apply","count","expectedValue","FluentRules","customRules","argsToConfig","test","FluentEnsure","assertInitialized","initialize","customRule","taggedRules","off","module"],"mappings":"qEAAAA,QAAAC,eAAAC,EAAA,cAAAC,OAAA,eACEC,OAAO,EACPC,SAAS,EACTC,WAAY,sCACZC,aAAc,+ECJhB,IAAAC,GAAA,WAAA,QAAAA,KACIC,KAAAH,WAAa,wBACbG,KAAAC,QAAU,aACVD,KAAAE,QAAU,iBACVF,KAAAG,QAAU,YACVH,KAAAI,YAAc,WAClB,MAAAL,KANaN,GAAAM,SAAQA,4ECGrB,IAAAM,GAAA,WAAA,QAAAA,MAGA,MAAAA,KAHaZ,GAAAY,MAAKA,gFCHlB,IAQAC,IARA,WAAA,QAAAC,MAEA,MAAAA,MAEA,WAAA,QAAAC,MAEA,MAAAA,MAEA,WAAA,QAAAF,MAIA,MAAAA,MAJab,GAAAa,aAAYA,4ECRzB,IAAAG,GAAA,WACI,QAAAA,GAAmBC,GAAAV,KAAAU,OAAAA,EACvB,MAAAD,KAFahB,GAAAgB,SAAQA,2ECArB,IAAAE,GAAA,WAAA,QAAAA,MAKA,MAAAA,KALalB,GAAAkB,QAAOA,wECEpB,IAAAC,GAAA,WAAA,QAAAA,MAIA,MAAAA,KAJanB,GAAAmB,KAAIA,+FCEjB,IAAAC,GAAA,WAOI,QAAAA,GAAYC,GACR,GAAKA,EAAL,CAIA,GAAIC,GAAY,GAAIC,MACpBD,GAAUE,KAAK,GAAIC,GAAAT,SAASK,EAAKK,KACjCnB,KAAKe,UAAYA,EACjBf,KAAKoB,SAAW,GAAIJ,OACpBhB,KAAKqB,mBAAoB,GAEjC,MAAAR,KAlBapB,GAAAoB,aAAYA,ymBCIzB,IAAAS,GAAA,WAEI,QAAAA,GAAoBC,GAAAvB,KAAAuB,MAAAA,EAChBvB,KAAKwB,SAAWC,OAAOD,SA+B/B,MA5BIF,GAAAI,UAAAC,SAAA,SAASC,GACL,GAAIC,GAA0BD,EAAME,QAChCC,EAAKF,EAAO,GACZG,EAAI,GAAIC,OAAMF,EAAGF,OAAO,GAAGK,aAE/B,OADAF,GAAEG,KAAOJ,EAAGK,IACLJ,GAGVV,EAAAI,UAAAW,oBAAA,SAAoBC,GAApB,GAAAC,GAAAvC,IACG,KAAIsC,EAAaE,MAAjB,CAIA,GAAIA,GAAQ,EACZF,GAAavB,UAAU0B,QAAQ,SAAAC,GACvBA,GAAYA,EAAShC,QAAUgC,EAAShC,SAAW6B,EAAKhB,MAAMoB,WAC9DH,GAASE,EAAShC,OAAS,OAGnC4B,EAAaE,MAAQA,EAAMI,SAG/BtB,EAAAI,UAAAmB,gBAAA,SAAgBV,GACZA,EAAOA,EAAKW,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,MACnD,IAAIC,GAAQ,GAAIC,QAAO,SAAWb,EAAO,aACrCc,EAAUF,EAAMG,KAAKlD,KAAKwB,SAAS2B,OACvC,OAAmB,QAAZF,EAAmBG,OAAYC,mBAAmBJ,EAAQ,GAAGH,QAAQ,MAAO,OAjC3FxB,EAAAgC,YAACC,EAAAC,2DACY/D,GAAA6B,QAAOA,2FCNpB,IAAAmC,GAAA,WACI,QAAAA,GAAmBlC,GAAAvB,KAAAuB,MAAAA,EACvB,MAAAkC,KAFahE,GAAAgE,uBAAsBA,uFCAnC,IAAAC,GAAA,WACI,QAAAA,GAAmBpB,GAAAtC,KAAAsC,aAAAA,EACvB,MAAAoB,KAFajE,GAAAiE,mBAAkBA,oFCA/B,IAAAC,GAAA,WACI,QAAAA,GAAmBC,GAAA5D,KAAA4D,QAAAA,EACvB,MAAAD,KAFalE,GAAAkE,gBAAeA,kFCA5B,IAAAE,GAAA,WACI,QAAAA,GAAmB/C,GAAAd,KAAAc,KAAAA,EACvB,MAAA+C,KAFapE,GAAAoE,cAAaA,qFCD1B,IAAAC,GAAA,WACI,QAAAA,GAAmBhD,GAAAd,KAAAc,KAAAA,EACvB,MAAAgD,KAFarE,GAAAqE,iBAAgBA,43BCyC7B,SAAYC,GACRA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,MAAA,GAAA,SAHQtE,EAAAsE,kBAAAtE,EAAAsE,oBAAZ,IAAYA,GAAAtE,EAAAsE,gBAOZC,EAAA,WAII,QAAAA,GAAoBC,EACRC,EACAC,EACA5C,EACA6C,GAJQpE,KAAAiE,SAAAA,EACRjE,KAAAkE,GAAAA,EACAlE,KAAAmE,KAAAA,EACAnE,KAAAuB,MAAAA,EACAvB,KAAAoE,QAAAA,EAPZpE,KAAAqE,aAAeN,EAAgBO,aAiInC,MAxHIN,GAAAtC,UAAA6C,MAAA,WAAA,GAAAhC,GAAAvC,KAEQL,EAAQ6E,EAAAC,QAAY9E,MAEpB+E,EAAMC,OAAOC,WAAWF,GAC5BA,GAAIG,QAAUlF,EACd+E,EAAII,IAAM9E,KAAKiE,SAASpE,WAAa,UAErC,IAAI+E,GAA0BD,OAAOC,WACjCG,EAAUH,EAAWI,IAoDzB,OA9CAD,GAAQE,OAAOC,cAAgB,SAAApE,GAAQ,MAAAyB,GAAK4C,gBAAgBrE,IAK5DiE,EAAQE,OAAOG,iBAAmB,SAAAtE,GAAQ,MAAAyB,GAAK8C,mBAAmBvE,IAMlEiE,EAAQE,OAAOK,gBAAkB,SAAA1B,GAAW,MAAArB,GAAKgD,kBAAkB3B,IAKnEmB,EAAQE,OAAOO,iBAAmB,SAAAlD,GAAgB,MAAAC,GAAKkD,mBAAmBnD,IAEtE3C,GAEA+E,EAAIgB,aAAa,SAAAC,GACb,GAAIC,GACAC,EAEAC,EAAUnB,OAAOmB,OACrB,KAAK,GAAIvE,KAASuE,GAAQC,gBAClBD,EAAQC,gBAAgBxE,KAAWoE,EAAOC,WAC1CA,EAAWrE,GAEXuE,EAAQC,gBAAgBxE,KAAWoE,EAAOE,WAC1CA,EAAWtE,EAInByE,SAAQC,IAAI,+BAAiCL,EAAW,OAASC,KAKzEnB,EAAIwB,YAAY,WAAM,MAAA3D,GAAK4D,kBAE3BzB,EAAI9C,MAAM,SAAAA,GAAS,MAAAW,GAAK6D,QAAQxE,KAEhC8C,EAAI2B,aAAa,WAAM,MAAA9D,GAAK+D,mBAGrB,GAAIC,SAAyB,SAACC,EAASC,GAC1C/B,EAAIH,QACCmC,KAAK,WACFnE,EAAKoE,mBAAmB5C,EAAgB6C,WACxCJ,EAAQzC,EAAgB6C,aAE3BC,KAAK,SAAAjF,GACFW,EAAKoE,mBAAmB5C,EAAgB9B,OACxCwE,EAAO,GAAIxE,OAAML,SAKjCoC,EAAAtC,UAAAoF,KAAA,WACInC,OAAOC,WAAWF,IAAIoC,QAGlB9C,EAAAtC,UAAAiF,mBAAR,SAA2BZ,GACnB/F,KAAKqE,eAAiB0B,IAI1BC,QAAQC,IAAI,gCAAkCF,GAC9C/F,KAAKqE,aAAe0B,EACpB/F,KAAKkE,GAAG6C,QAAQ,GAAIC,GAAAvD,uBAAuBsC,MAGvC/B,EAAAtC,UAAAyE,cAAR,WACInG,KAAK2G,mBAAmB5C,EAAgB6C,YAGpC5C,EAAAtC,UAAA4E,eAAR,WACItG,KAAK2G,mBAAmB5C,EAAgBO,eAGpCN,EAAAtC,UAAA0E,QAAR,SAAgBxE,GACZ5B,KAAK2G,mBAAmB5C,EAAgB9B,QAGpC+B,EAAAtC,UAAAyD,gBAAR,SAAwBrE,GACpBkF,QAAQC,IAAI,gCAAkCnF,EAAKK,IACnDnB,KAAKkE,GAAG6C,QAAQ,GAAIE,GAAApD,cAAc/C,KAG9BkD,EAAAtC,UAAA2D,mBAAR,SAA2BvE,GACvBkF,QAAQC,IAAI,+BAAiCnF,EAAKK,IAC9CL,EAAKK,KAAOnB,KAAKuB,MAAMoB,UACvB3C,KAAKkE,GAAG6C,QAAQ,GAAIG,GAAApD,iBAAiBhD,KAIrCkD,EAAAtC,UAAA6D,kBAAR,SAA0B3B,GACtB5D,KAAKkE,GAAG6C,QAAQ,GAAII,GAAAxD,gBAAgBC,KAGhCI,EAAAtC,UAAA+D,mBAAR,SAA2BnD,GACvBtC,KAAKoE,QAAQ/B,oBAAoBC,GACjCtC,KAAKkE,GAAG6C,QAAQ,GAAIK,GAAA1D,mBAAmBpB,KAjI/C0B,EAAAV,YAACC,EAAAC,+GACY/D,GAAAuE,YAAWA,4ECjDxB,IAAAqD,GAAA,WAAA,QAAAA,MAGA,MAAAA,KAHa5H,GAAA4H,SAAQA,+rBCUrB,IAAAC,GAAA,WAGI,QAAAA,GAAoBnD,EACRF,EACAsD,EACAhG,EACA6C,GAJQpE,KAAAmE,KAAAA,EACRnE,KAAAiE,SAAAA,EACAjE,KAAAuH,YAAAA,EACAvH,KAAAuB,MAAAA,EACAvB,KAAAoE,QAAAA,EA+HhB,MA7HIkD,GAAA5F,UAAA8F,QAAA,SAAQC,GAAR,GAAAlF,GAAAvC,IACI,OAAO,IAAIuG,SAAgB,SAACC,EAASC,GAC7BgB,EACAlF,EAAK4B,KAAKuD,IAAI,OACTC,KAAK,WAAM,MAAApF,GAAKqF,QAAQpB,EAASC,KACjCoB,MAAM,SAAA7F,GAAK,MAAAyE,GAAO,GAAIxE,OAAM,0BAC1BM,EAAKuF,KACZtB,EAAQjE,EAAKuF,MAEbvF,EAAKqF,QAAQpB,EAASC,MAKlCa,EAAA5F,UAAAqG,MAAA,SAAMpF,GAAN,GAAAJ,GAAAvC,IAGI,OAFAA,MAAKuB,MAAMyG,SAAU,EAEd,GAAIzB,SAAgB,SAACC,EAASC,GACjClE,EAAKiF,UACAG,KAAK,SAAAM,GACE1F,EAAKhB,MAAMyG,SACXzF,EAAK2F,aAAavF,EAAU6D,EAASC,KAG5CoB,MAAM,SAAAjG,GAAS,MAAA6E,GAAO7E,QAInC0F,EAAA5F,UAAAyG,OAAA,WAAA,GAAA5F,GAAAvC,IACSA,MAAKuB,MAAMoB,WAIhB3C,KAAKuH,YAAYT,OACjB9G,KAAKwH,UACAG,KAAK,SAAAM,GACF1F,EAAK4B,KAAKiE,KAAK7F,EAAK0B,SAAS7D,YAAc,aAAc,QAGjEJ,KAAK8H,KAAO1E,OACZpD,KAAKuB,MAAMoB,SAAWS,SAG1BkE,EAAA5F,UAAA2G,OAAA,SAAO1F,GAAP,GAAAJ,GAAAvC,IACI,OAAO,IAAIuG,SAAiB,SAACC,EAASC,GAClC,MAAK9D,OAKLJ,GAAKiF,UACAG,KAAK,SAAAM,GACF1F,EAAK4B,KAAKuD,IAAInF,EAAK0B,SAAS7D,YAAc,oBAAsBkI,mBAAmB3F,IAC9EgF,KAAK,SAAAY,GACF/B,EAAQ+B,EAASzG,WAEpB+F,MAAM,SAAAjG,GACHW,EAAKiG,YAAY5G,EAAO6E,EAAQ,GAAIxE,OAAM,4BAGrD4F,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,8BAdjCuE,IAAQ,MAkBpBc,EAAA5F,UAAA+G,QAAA,SAAQ9F,GAAR,GAAAJ,GAAAvC,IACI,OAAO,IAAIuG,SAAiB,SAACC,EAASC,GAClClE,EAAKiF,UACAG,KAAK,SAAAM,GACF1F,EAAK4B,KAAKuE,IAAInG,EAAK0B,SAAS7D,YAAc,iCAAmCuC,SAAUA,IAClFgF,KAAK,SAAAY,GACFhG,EAAKoG,OAAOhG,EAAU6D,EAASC,GAC/BmC,eAAeC,QAAQ,WAAYlG,KAEtCkF,MAAM,SAAAjG,GAAS,MAAAW,GAAKiG,YAAY5G,EAAO6E,EAAQlE,EAAK6B,QAAQzC,SAASC,QAE7EiG,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,6BAI7CqF,EAAA5F,UAAAoH,0BAAA,WAAA,GAAAvG,GAAAvC,IACI,OAAO,IAAIuG,SAAyB,SAACC,EAASC,GAC1ClE,EAAKiF,UACAG,KAAK,SAAAM,GACF1F,EAAK4B,KAAKuD,IAAInF,EAAK0B,SAAS7D,YAAc,yBACrCuH,KAAK,SAAAY,GACF/B,EAAQ+B,EAASzG,WAEpB+F,MAAM,SAAAjG,GAAS,MAAAW,GAAKiG,YAAY5G,EAAO6E,EAAQlE,EAAK6B,QAAQzC,SAASC,QAE7EiG,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,6BAIrCqF,EAAA5F,UAAAkG,QAAR,SAAgBpB,EAAmBC,GAAnC,GAAAlE,GAAAvC,IACIA,MAAKmE,KAAKuD,IAAI,QACTC,KAAK,SAAAM,GACF1F,EAAKuF,KAAOG,EAAEM,SACdhG,EAAK4B,KAAK4E,UAAU,SAAAC,GAChBA,EAAQC,WAAW,eAAgB1G,EAAKuF,QAE5CtB,EAAQjE,EAAKuF,QAEhBD,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,2BAGjCqF,EAAA5F,UAAAwG,aAAR,SAAqBvF,EAAU6D,EAAmBC,GAAlD,GAAAlE,GAAAvC,IACIA,MAAKmE,KAAKiE,KAAKpI,KAAKiE,SAAS7D,YAAc,aAAeuC,SAAUA,IAC/DgF,KAAK,SAAAY,GACFhG,EAAKoG,OAAOhG,EAAU6D,EAASC,KAElCoB,MAAM,SAAAjG,GACHW,EAAKiG,YAAY5G,EAAO6E,EAAQlE,EAAK6B,QAAQzC,SAASC,OAI1D0F,EAAA5F,UAAAiH,OAAR,SAAehG,EAAkB6D,EAAmBC,GAChDzG,KAAKuB,MAAMoB,SAAWA,EAEtB3C,KAAK4H,QAAQpB,EAASC,IAGlBa,EAAA5F,UAAA8G,YAAR,SAAoB5G,EAA4B6E,EAAkByC,GAC9DlJ,KAAK8H,KAAO1E,OACZqD,EAAOyC,IArIf5B,EAAAhE,YAACC,EAAAC,2GACY/D,GAAA6H,aAAYA,6yBCQzB,IAAA6B,GAAA,WAMI,QAAAA,GAAoBC,EACRlF,EACA3C,EACA6C,EACRH,EACAE,GALgBnE,KAAAoJ,QAAAA,EACRpJ,KAAAkE,GAAAA,EACAlE,KAAAuB,MAAAA,EACAvB,KAAAoE,QAAAA,EAGRH,EAASpE,WAAa2E,EAAAC,QAAY5E,WAClCsE,EAAK4E,UACD,SAAAC,GAAW,MAAAA,GACNK,YAAY7E,EAAAC,QAAY5E,YACxByJ,iBAAgB,KAEzB/H,EAAMoB,SAAWiG,eAAeW,QAAQ,YAmFhD,MAhFIJ,GAAAzH,UAAA8H,gBAAA,SAAgBC,EAA6BC,GAA7C,GAAAnH,GAAAvC,IACIyJ,GAAOjH,MAAQ,SACfiH,EAAOE,gBAAgB,YAAaC,EACpC,IAAMnB,IAAYoB,MAAO,UAAW1H,KAAM,UAAW2H,SAAU,gBAAiBtH,MAAO,UAAWuH,WAAW,GACvGhC,GAAU8B,MAAO,QAAS1H,KAAM,QAAS2H,SAAU,cAAetH,MAAO,QAASuH,WAAW,GAC7FC,GAAYH,MAAO,UAAW1H,KAAM,UAAW2H,SAAU,gBAAiBtH,MAAO,WACjFyH,GAASJ,MAAO,OAAQ1H,KAAM,OAAQ2H,SAAU,aAActH,MAAO,OAE3EiH,GAAOS,KACHD,EACAD,EACAvB,EACAV,GAGJ,IAAIoC,GAAsB,SAACC,GACvB,GAAMC,GAAW9H,EAAK6B,QAAQvB,gBAAgB,IAE9C,IAAIwH,EACA,MAAO5B,EAGX,IAAM9F,GAAWJ,EAAK6B,QAAQvB,gBAAgB,KACxCyH,EAAS/H,EAAK6B,QAAQvB,gBAAgB,IAS5C,OAPIF,KACAJ,EAAKhB,MAAMoB,SAAWA,EACtBiG,eAAeC,QAAQ,WAAYlG,IAGvClB,OAAO8I,QAAQC,aAAa,KAAM,KAAM,KAEnCjI,EAAKhB,MAAMoB,SAIZ2H,EACON,EAGJC,EAPIlC,EAUf0B,GAAOgB,iBAAiBN,GACxBnK,KAAK0J,OAASA,GAGlBP,EAAAzH,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAKkE,GAAGyG,UAAU3D,EAAAvD,uBAAwB,SAAAzB,GACtCO,EAAKqI,mBAET5K,KAAK4K,kBAGTzB,EAAAzH,UAAAyG,OAAA,WACInI,KAAKoJ,QAAQjB,SACbnI,KAAK0J,OAAOmB,gBAAgB,SAC5B7K,KAAK8K,aAAc,GAGvB3B,EAAAzH,UAAAqJ,OAAA,WACI/K,KAAK0J,OAAOmB,gBAAgB,YAGhC1B,EAAAzH,UAAAuI,KAAA,WACQjK,KAAK8K,YACL9K,KAAK0J,OAAOmB,gBAAgB,QAE5B7K,KAAK0J,OAAOmB,gBAAgB,UAI5B1B,EAAAzH,UAAAkJ,eAAR,WACI5K,KAAK8K,YAAsC1H,SAAxBpD,KAAKuB,MAAMoB,UACA,MAAvB3C,KAAKuB,MAAMoB,UACuC,iBAAlD3C,KAAK0J,OAAOsB,mBAAmBvB,OAAOK,SAE7C9J,KAAK2C,SAAW3C,KAAKuB,MAAMoB,UAnGnCwG,EAAA7F,YAACC,EAAAC,8HACY/D,GAAA0J,IAAGA,CAwGhB,IAAAS,GAAA,WAEI,QAAAA,GAAoBrI,EAAsB6C,GAAtBpE,KAAAuB,MAAAA,EAAsBvB,KAAAoE,QAAAA,EAe9C,MAbIwF,GAAAlI,UAAAuJ,IAAA,SAAIC,EAA8CC,GAC9C,GAAID,EAAsBE,qBAAqBC,KAAK,SAAAC,GAChD,GAAIzB,GAAQyB,EAAE7B,MACd,QAAQI,EAAME,YACd,CACA,GAAIwB,GAAavL,KAAKuB,MAAMoB,QAC5B,KAAK4I,EACD,MAAOJ,GAAKK,OAAO,GAAIC,GAAAC,SAAS,UAIxC,MAAOP,MAhBfvB,EAAAtG,YAACC,EAAAC,0MCxGD,SAAAuF,GAA0B4C,GACxBA,EAAQC,IACLC,wBACAC,QAAQ,aACRC,OAAO,sBAENvH,EAAAC,QAAY9E,OACdgM,EAAQC,IAAII,qBAGVxH,EAAAC,QAAY7E,SACd+L,EAAQC,IAAIG,OAAO,mBAGrBJ,EAAQpH,QAAQoD,KAAK,WAAM,MAAAgE,GAAQM,YA3BjCzH,EAAAC,QAAY9E,QACZ4D,EAAA2I,WAAWC,YAAY,GAAIC,GAAAC,iBAC3B9I,EAAA2I,WAAWI,SAAS/I,EAAA2I,WAAWK,SAAS5M,QAKtC4G,QAASkD,QACb+C,UACEC,kBAAkB,KAINhN,EAAAsJ,UAASA,6pBCRzB,IAAA2D,GAAA,WAEI,QAAAA,GAAoBvI,EACRF,EACA1C,GAFQvB,KAAAmE,KAAAA,EACRnE,KAAAiE,SAAAA,EACAjE,KAAAuB,MAAAA,EAchB,MAZImL,GAAAhL,UAAAiL,SAAA,WAAA,GAAApK,GAAAvC,IACI,OAAO,IAAIuG,SAAgB,SAACC,EAASC,GACjClE,EAAK4B,KAAKuD,IAAInF,EAAK0B,SAAShE,SACvB0H,KAAK,SAAAY,GACE,GAAIqE,GAAOrE,EAASzG,OAChB8K,IAAQA,EAAKC,OACbrG,EAAgBoG,EAAKC,SAGhChF,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,6BAhBjDyK,EAAApJ,YAACC,EAAAC,mFACY/D,GAAAiN,YAAWA,wzBCIxB,IAAAI,GAAA,WAOI,QAAAA,GAAoBC,EACRxF,EACArD,GAFQlE,KAAA+M,YAAAA,EACR/M,KAAAuH,YAAAA,EACAvH,KAAAkE,GAAAA,EAPZlE,KAAAgN,eAAiB,aA8DrB,MArDIF,GAAApL,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAKiN,kCAAoCjN,KAAKkE,GAAGyG,UAAU3D,EAAAvD,uBAAwB,SAAAzB,GAClDA,EAAGT,QAAU2L,EAAAnJ,gBAAgB6C,WACtDrE,EAAK4K,YAITnN,KAAKuH,YAAYlD,eAAiB6I,EAAAnJ,gBAAgB6C,WAClD5G,KAAKmN,WAIbL,EAAApL,UAAA0L,SAAA,WACIpN,KAAKiN,kCAAkCI,UACnCrN,KAAKsN,2BACLtN,KAAKsN,0BAA0BD,UAE/BrN,KAAKuN,8BACLvN,KAAKuN,6BAA6BF,WAIlCP,EAAApL,UAAAyL,QAAR,WAAA,GAAA5K,GAAAvC,IACIA,MAAK+M,YAAYJ,WACZhF,KAAK,SAAAkF,GACFtK,EAAKsK,MAAQA,EAEbtK,EAAK+K,0BAA4B/K,EAAK2B,GAAGyG,UAAU1D,EAAApD,cAAe,SAAA7B,GAC9D,GAAIkD,GAA+BlD,CACnCO,GAAKiL,WAAWtI,EAAcpE,KAAKK,IACnCoB,EAAKsK,MAAMY,QAAQvI,EAAcpE,QAGrCyB,EAAKgL,6BAA+BhL,EAAK2B,GAAGyG,UAAUzD,EAAApD,iBAAkB,SAAA9B,GACpEO,EAAKiL,WAA8BxL,EAAGlB,KAAKK,QAGlD0G,MAAM,SAACjG,GAAgB,MAAAW,GAAKyK,eAAiBpL,EAAMgC,WAGpDkJ,EAAApL,UAAA8L,WAAR,SAAmBrM,GACf,GAAIL,EAOJ,IANAd,KAAK6M,MAAMpK,QAAQ,SAAAiL,GACXA,EAAEvM,KAAOA,IACTL,EAAO4M,KAIX5M,EAAM,CACN,GAAI6M,GAAQ3N,KAAK6M,MAAMe,QAAQ9M,EAC/Bd,MAAK6M,MAAMgB,OAAOF,EAAO,KA9DrCb,EAAAxJ,YAACC,EAAAC,iGACY/D,GAAAqN,YAAWA,yFCXxB,IAAAgB,GAAA,WACI,QAAAA,GAAmBxL,GAAAtC,KAAAsC,aAAAA,EACvB,MAAAwL,KAFarO,GAAAqO,qBAAoBA,yyBCejC,IAAAC,GAAA,WAGI,QAAAA,GAAoB5J,EACRF,EACA1C,EACA6C,EACAF,GAJQlE,KAAAmE,KAAAA,EACRnE,KAAAiE,SAAAA,EACAjE,KAAAuB,MAAAA,EACAvB,KAAAoE,QAAAA,EACApE,KAAAkE,GAAAA,EAyEhB,MAvEI6J,GAAArM,UAAAsM,iBAAA,SAAiB1L,EAA4BoH,GACrCA,EAAOsB,mBAAmBiD,WAAa,gBAAkB3L,EAAaE,QACtExC,KAAKkO,oBAAsB5L,EAC3BtC,KAAKoE,QAAQ/B,oBAAoBC,GACjCtC,KAAKkE,GAAG6C,QAAQ,GAAIoH,GAAAL,qBAAqBxL,IACzCoH,EAAOmB,gBAAgB,gBAAkB1J,GAAImB,EAAaE,UAIlEuL,EAAArM,UAAA0M,YAAA,SAAY9L,EAA4BsB,GAAxC,GAAArB,GAAAvC,KACQqO,EAAI,GAAIC,GAAA3N,OAKZ,IAJA0N,EAAEE,eAAiBjM,EAAanB,GAChCkN,EAAEG,KAAOxO,KAAKuB,MAAMoB,SACpB0L,EAAEI,KAAO7K,EAELtB,EAAanB,GACb,MAAO,IAAIoF,SAAiB,SAACC,EAASC,GAClClE,EAAK4B,KAAKiE,KAAK7F,EAAK0B,SAAS9D,SACzBuO,GAAIpM,EAAanB,GACjBsN,KAAM7K,IAEL+D,KAAK,SAAAY,GACFjG,EAAalB,SAASqM,QAAQY,GAC9B7H,EAAQ6H,KAEXxG,MAAM,SAAAjG,GAAS,MAAA6E,GAAOlE,EAAK6B,QAAQzC,SAASC,OAGrD,IAAIV,EAOJ,OANAoB,GAAavB,UAAU0B,QAAQ,SAAAkM,GACvBA,EAAEjO,SAAW6B,EAAKhB,MAAMoB,WACxBzB,EAAWyN,KAIZ,GAAIpI,SAAiB,SAACC,EAASC,GAClClE,EAAK4B,KAAKiE,KAAK7F,EAAK0B,SAAS/D,SACzBwO,GAAIxN,EAASR,OACb+N,KAAM7K,IAEL+D,KACD,SAAAY,GACIjG,EAAanB,GAAKoH,EAASzG,QAC3BS,EAAK2B,GAAG6C,QAAQ,GAAIK,GAAA1D,mBAAmBpB,IACvCA,EAAalB,SAASqM,QAAQY,GAC9B7H,EAAQ6H,KAEXxG,MAAM,SAAAjG,GAAS,MAAA6E,GAAOlE,EAAK6B,QAAQzC,SAASC,SAK7DmM,EAAArM,UAAAkN,iBAAA,WAAA,GAAArM,GAAAvC,IACI,OAAO,IAAIuG,SAAwB,SAACC,EAASC,GACzClE,EAAK4B,KAAKuD,IAAInF,EAAK0B,SAAS9D,SACvBwH,KAAK,SAAAY,GACF,GAAIA,EAASA,SAAU,CACnB,GAAIqE,GAAOrE,EAASzG,OACpB,IAAI8K,EAAM,CACN,GAAIiC,GAAgCjC,CAGpC,OAFAiC,GAAcpM,QAAQ,SAAAqM,GAAK,MAAAvM,GAAK6B,QAAQ/B,oBAAoByM,SAC5DtI,GAAQqI,IAKhBrI,EAAQ,QAEXqB,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,6BA9EjD8L,EAAAzK,YAACC,EAAAC,+GACY/D,GAAAsO,oBAAmBA,yxBCJhC,IAAAgB,GAAA,WAKI,QAAAA,GAAoB3F,EACR7H,EACA2C,EACAwF,GAHQ1J,KAAAoJ,QAAAA,EACRpJ,KAAAuB,MAAAA,EACAvB,KAAAkE,GAAAA,EACAlE,KAAA0J,OAAAA,EAqChB,MAnCInK,QAAAC,eAAIuP,EAAArN,UAAA,qBAAJ,WACI,MAAO1B,MAAKuB,MAAMoB,WAAa3C,KAAKc,KAAKK,oCAG7C4N,EAAArN,UAAAsN,OAAA,WACQhP,KAAKiP,gBAIJjP,KAAKc,KAAKwB,eACXtC,KAAKc,KAAKwB,aAAe,GAAI4M,GAAArO,aAAab,KAAKc,OAGnDd,KAAKoJ,QAAQ4E,iBAAiBhO,KAAKc,KAAKwB,aAActC,KAAK0J,UAG/DqF,EAAArN,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAKmP,iCAAmCnP,KAAKkE,GAAGyG,UAAUwD,EAAAL,qBAAsB,SAAA9L,GAC5E,GAAIoN,GAAOpN,EAAEM,aACTvB,EAAYqO,EAAKrO,SAErBwB,GAAK8M,YAAa,EACdtO,EAAUuO,OAAS,GACnBvO,EAAU0B,QAAQ,SAAAkM,GACVA,EAAEjO,SAAW6B,EAAKhB,MAAMoB,UAAYgM,EAAEjO,SAAW6B,EAAKzB,KAAKK,KAC3DoB,EAAK8M,YAAa,QAOtCN,EAAArN,UAAA0L,SAAA,WACIpN,KAAKmP,iCAAiC9B,WA1C1C/J,YAACC,EAAAgM,sEAFLR,EAAAzL,YAACC,EAAAC,4GACY/D,GAAAsP,QAAOA,sqBCNpB,IAAAS,GAAA,WAII,QAAAA,GAAoBpG,EAAsCM,GAAtC1J,KAAAoJ,QAAAA,EAAsCpJ,KAAA0J,OAAAA,EAqB9D,MAlBI8F,GAAA9N,UAAA+N,SAAA,SAASC,EAAQC,GACRD,SACM1P,MAAKoJ,QAAQ8E,oBAGxBlO,KAAKsC,aAAetC,KAAKoJ,QAAQ8E,oBAE5BlO,KAAKsC,aAGNqN,EAAYC,SAASC,SAAS7P,KAAKsC,aAAaE,OAFhDxC,KAAK0J,OAAOmB,gBAAgB,SAMpC2E,EAAA9N,UAAA0M,YAAA,WACIpO,KAAKoJ,QAAQgF,YAAYpO,KAAKsC,aAActC,KAAK4D,SACjD5D,KAAK4D,QAAU,IAxBvB4L,EAAAlM,YAACC,EAAAC,kFACY/D,GAAA+P,sBAAqBA,m0BCMlC,IAAAM,GAAA,WAME,QAAAA,GAAoB1G,EACV7H,EACA2C,GAFUlE,KAAAoJ,QAAAA,EACVpJ,KAAAuB,MAAAA,EACAvB,KAAAkE,GAAAA,EAqEZ,MAnEE4L,GAAApO,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACEA,MAAK6O,cAAgB,GAAI7N,OAEzBhB,KAAK4O,mBAEL5O,KAAK+P,4BAA8B/P,KAAKkE,GAAGyG,UAAU3D,EAAAvD,uBAAwB,SAAAzB,GAC3E,GAAIT,GAAiCS,EAAGT,KACpCA,KAAU2L,EAAAnJ,gBAAgBO,aAE5B/B,EAAKsM,cAAchB,OAAOtL,EAAKsM,cAAcS,QACpC/N,IAAU2L,EAAAnJ,gBAAgB6C,WAEnCrE,EAAKqM,sBAKXkB,EAAApO,UAAA0L,SAAA,WACEpN,KAAKgQ,cACLhQ,KAAK+P,4BAA4B1C,WAG3ByC,EAAApO,UAAAsO,YAAR,WACMhQ,KAAKiQ,gCACPjQ,KAAKiQ,+BAA+B5C,UAElCrN,KAAKuN,8BACPvN,KAAKuN,6BAA6BF,WAI9ByC,EAAApO,UAAAkN,iBAAR,WAAA,GAAArM,GAAAvC,IACEA,MAAKoJ,QAAQwF,mBACVjH,KAAK,SAAAkH,GAEJtM,EAAKyN,cAEAnB,IAGLtM,EAAKsM,cAAgBA,EAErBtM,EAAKgL,6BAA+BhL,EAAK2B,GAAGyG,UAAUzD,EAAApD,iBAAkB,SAAA9B,GACtEO,EAAKsM,cAAcpM,QAAQ,SAAAqM,GACzB,GAAI/N,GAAY+N,EAAE/N,SACO,KAArBA,EAAUuO,QACZvO,EAAU0B,QAAQ,SAAAkM,GAChB,GAAI7N,GAA0BkB,EAAGlB,IACjC,IAAIA,EAAKoP,WAAavB,EAAEjO,SAAWI,EAAKK,GAAI,CAC1C,GAAIwM,GAAQpL,EAAKsM,cAAcjB,QAAQkB,GACnCxM,EAAeC,EAAKsM,cAAclB,EACtCpL,GAAKsM,cAAchB,OAAOF,EAAO,GAC7BpL,EAAK6G,QAAQ8E,sBAAwB5L,SAChCC,GAAK6G,QAAQ8E,2BAQhC3L,EAAK0N,+BAAiC1N,EAAK2B,GAAGyG,UAAUvD,EAAA1D,mBAAoB,SAAA1B,GAClCA,EAAGM,YAC3CC,GAAKsM,cAAcpB,QAAQzL,EAAEM,oBA1EvCwN,EAAAxM,YAACC,EAAAC,mGACY/D,GAAAqQ,iBAAgBA,4xBCF7B,IAAAK,GAAA,WAQI,QAAAA,GAAoB/G,EAAsClF,EAA6BwF,GAAnE1J,KAAAoJ,QAAAA,EAAsCpJ,KAAAkE,GAAAA,EAA6BlE,KAAA0J,OAAAA,EA+B3F,MA7BIyG,GAAAzO,UAAAsN,OAAA,WACIhP,KAAKoJ,QAAQ4E,iBAAiBhO,KAAKsC,aAActC,KAAK0J,SAG1DyG,EAAAzO,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAKoQ,YAAcpQ,KAAKsC,aAAalB,SAAS,GAAGqN,KACjDzO,KAAKqP,WAAarP,KAAKsC,cAAgBtC,KAAKsC,aAAajB,kBAEzDrB,KAAKmP,iCAAmCnP,KAAKkE,GAAGyG,UAAUwD,EAAAL,qBAAsB,SAAA9L,GACxEA,EAAEM,aAAanB,KAAOoB,EAAKD,aAAanB,GACxCoB,EAAK8M,YAAa,EAElB9M,EAAK8M,YAAa,IAI1BrP,KAAKqQ,4BAA8BrQ,KAAKkE,GAAGyG,UAAUxD,EAAAxD,gBAAiB,SAAA3B,GAClE,GAAI4B,GAA4B5B,EAAG4B,OAC/BA,GAAQ2K,iBAAmBhM,EAAKD,aAAanB,KAC7CoB,EAAKD,aAAalB,SAASqM,QAAQ7J,GACnCrB,EAAK6N,YAAcxM,EAAQ6K,SAKvC0B,EAAAzO,UAAA0L,SAAA,WACIpN,KAAKmP,iCAAiC9B,UACtCrN,KAAKqQ,4BAA4BhD,WApCrC/J,YAACC,EAAAgM,sFAFLY,EAAA7M,YAACC,EAAAC,oGACY/D,GAAA0Q,oBAAmBA,4qBCHhC,IAAAG,GAAA,WAKI,QAAAA,GAAoBlH,EAA+B7H,EAAcgP,GAA7CvQ,KAAAoJ,QAAAA,EAA+BpJ,KAAAuB,MAAAA,EAC/CvB,KAAKwQ,WAAaD,EAAkBE,wBACpCzQ,KAAKwQ,WAAWE,gBAAkB,SAgB1C,MAbIJ,GAAA5O,UAAAgJ,SAAA,WACI1K,KAAK2C,SAAW3C,KAAKuB,MAAMoB,UAG/B2N,EAAA5O,UAAAiP,kBAAA,SAAkBjR,GAAlB,GAAA6C,GAAAvC,IACI,OAAO,IAAIuG,SAAiB,SAAAC,GACxBjE,EAAK6G,QAAQf,OAAO3I,GACfiI,KAAK,SAAAM,GACFzB,GAASyB,GACT1F,EAAKhB,MAAMoB,SAAWjD,OAlBtC4D,YAACC,EAAAgM,UAAWqB,mBAAoBrN,EAAAsN,YAAYC,0EAHhDR,EAAAhN,YAACC,EAAAC,WACAD,EAAAwN,cAAc,0GACFtR,GAAA6Q,SAAQA,EAyBrBU,EAAAC,gBACKC,OAAO,SAACpC,GAAgB,MAAAA,GAAEnM,WAC1BwO,UAAU,SAACzR,EAAO0R,GAAQ,MAAAA,GAAIT,kBAAkBjR,KAChD2R,YAAY,4DACZC,cAAc,YACdC,GAAGjB,mFCpCR,IAAAkB,GAAA,WAAA,QAAAA,MAIA,MAAAA,KAJa/R,GAAA+R,eAAcA,iFCF3B,IAKAC,IALA,WAAA,QAAAC,MAGA,MAAAA,MAEA,WAAA,QAAAD,MAGA,MAAAA,MAHahS,GAAAgS,uCAAsCA,CAKnD,IAAAE,GAAA,WAAA,QAAAA,MAGA,MAAAA,KAHalS,GAAAkS,aAAYA,8qBCCzB,IAAAC,GAAA,WAEI,QAAAA,GAAoBzN,EACRF,EACA1C,EACA6C,GAHQpE,KAAAmE,KAAAA,EACRnE,KAAAiE,SAAAA,EACAjE,KAAAuB,MAAAA,EACAvB,KAAAoE,QAAAA,EAqBhB,MAnBIwN,GAAAlQ,UAAAmQ,UAAA,WAAA,GAAAtP,GAAAvC,IACI,OAAO,IAAIuG,SAAsB,SAACuL,EAAQrL,GACtClE,EAAK4B,KAAKuD,IAAInF,EAAK0B,SAAS7D,YAAc,WACrCuH,KAAK,SAAAY,GACFuJ,EAAOvJ,EAASzG,WAEnB+F,MAAM,SAAAjG,GAAS,MAAA6E,GAAO,GAAIxE,OAAM,6BAI7C2P,EAAAlQ,UAAAqQ,YAAA,SAAYC,EAAuBC,GAAnC,GAAA1P,GAAAvC,IACI,OAAO,IAAIuG,SAAc,SAACC,EAASC,GAC/BlE,EAAK4B,KAAK+N,OAAO3P,EAAK0B,SAAS7D,YAAc,iCAAmCkI,mBAAmB0J,GAAiB,gBAAkB1J,mBAAmB2J,IACpJtK,KAAK,WACFnB,MAEHqB,MAAM,SAAA7F,GAAK,MAAAyE,GAAOlE,EAAK6B,QAAQzC,SAASK,SAxBzD4P,EAAAtO,YAACC,EAAAC,6FACY/D,GAAAmS,eAAcA,02BCI3B,IAAAO,GAAA,WAQI,QAAAA,GAAoBC,EACJC,EACA3I,EACAxF,EACA3C,EACR0C,EACAG,GANYpE,KAAAoS,eAAAA,EACJpS,KAAAqS,aAAAA,EACArS,KAAA0J,OAAAA,EACA1J,KAAAkE,GAAAA,EACAlE,KAAAuB,MAAAA,EAGZvB,KAAKsS,kBAAoBrO,EAASpE,WAC9BoE,EAAS7D,YACT,wBACAkI,mBAAmB9G,SAAS+Q,SAAW,KAAO/Q,SAASgR,KAAO,gBAAkBlK,mBAAmBtI,KAAKuB,MAAMoB,WAyC1H,MAtCIwP,GAAAzQ,UAAA+Q,OAAA,SAAOT,EAAuBC,GAA9B,GAAA1P,GAAAvC,IACIA,MAAKoS,eAAeL,YAAYC,EAAeC,GAC1CtK,KAAK,WACF,GAAI+K,GAAgBnQ,EAAKoQ,OAAOD,cAC1B/E,EAAQ+E,EAAcE,UAAU,SAAAlT,GAAS,MAAAA,GAAMsS,gBAAkBA,GAAiBtS,EAAMuS,cAAgBA,GAC9GS,GAAc7E,OAAOF,EAAO,EAE5B,IAAMtD,GAAW,GAAIwI,GAAApB,sCACrBpH,GAASyI,qBAAuBzI,EAAS0I,YAAcf,EACvDzP,EAAKoQ,OAAOK,YAAY/R,KAAKoJ,KAEhCxC,MAAM,SAAC7F,GAAa,MAAAO,GAAKL,aAAeF,EAAE4B,WAGnDuO,EAAAzQ,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAK+P,4BAA8B/P,KAAKkE,GAAGyG,UAAU3D,EAAAvD,uBAAwB,SAAAzB,GAC5CA,EAAGT,QAAU2L,EAAAnJ,gBAAgB6C,WACtDrE,EAAKsP;GAIb7R,KAAK6R,aAGTM,EAAAzQ,UAAA0L,SAAA,WACIpN,KAAK+P,4BAA4B1C,WAG7B8E,EAAAzQ,UAAAmQ,UAAR,WAAA,GAAAtP,GAAAvC,IACIA,MAAKqS,aAAa7K,UACbG,KAAK,SAACsL,GACC1Q,EAAK0Q,MAAQA,EACb1Q,EAAK6P,eAAeP,YACflK,KAAK,SAACgL,GAAyB,MAAApQ,GAAKoQ,OAASA,IAC7C9K,MAAM,SAAC7F,GAAa,MAAAO,GAAKL,aAAeF,EAAE4B,YAEtDiE,MAAM,SAAC7F,GAAa,MAAAO,GAAKL,aAAeF,EAAE4B,WA1DvDuO,EAAA7O,YAACC,EAAAC,2IACY/D,GAAA0S,QAAOA,gtBCNpB,IAAAe,GAAA,WAKI,QAAAA,GAAoB9J,EACRM,EACAtF,EACA7C,EACRgP,GAJgBvQ,KAAAoJ,QAAAA,EACRpJ,KAAA0J,OAAAA,EACA1J,KAAAoE,QAAAA,EACApE,KAAAuB,MAAAA,EAERvB,KAAKwQ,WAAaD,EAAkBE,wBACpCzQ,KAAKqK,SAAWrK,KAAKoE,QAAQvB,gBAAgB,KAC7CtB,EAAMoB,SAAW3C,KAAKoE,QAAQvB,gBAAgB,KAE9CpB,OAAO8I,QAAQC,aAAa,KAAM,KAAM,KAoBhD,MAjBI0I,GAAAxR,UAAA+G,QAAA,WAAA,GAAAlG,GAAAvC,IACIA,MAAKwQ,WAAW2C,WACXxL,KAAK,WACFpF,EAAK6G,QAAQX,QAAQlG,EAAKhB,MAAMoB,UAC3BgF,KAAK,WACFpF,EAAKmH,OAAOmB,gBAAgB,UAE/BhD,MAAM,SAAC7F,GACW,aAAXA,EAAEG,KACFI,EAAKmH,OAAOmB,gBAAgB,SAE5BtI,EAAKX,MAAQI,MAI5B6F,MAAM,SAAA7F,GAAK,MAAAO,GAAKX,MAAQI,KAjCrCkR,EAAA5P,YAACC,EAAAC,2HACY/D,GAAAyT,QAAOA,yHCsCpB,IAAAE,GAAA,WAGI,QAAAA,GAAoBlP,GAAAlE,KAAAkE,GAAAA,EAsCxB,MApCIkP,GAAA1R,UAAA6C,MAAA,WAAA,GAAAhC,GAAAvC,IACQyB,QAAqB,eACW,YAA5B4R,aAAaC,WACbtT,KAAKuT,SAC8B,WAA5BF,aAAaC,YACpBD,aACKG,oBACA7L,KAAK,SAAA2L,GACiB,YAAfA,GACA/Q,EAAKgR,aAO7BH,EAAA1R,UAAAoF,KAAA,WACO9G,KAAKyT,cACJzT,KAAKyT,aAAapG,WAIlB+F,EAAA1R,UAAA6R,OAAR,WACIvT,KAAKyT,aAAezT,KAAKkE,GAAGyG,UAAUxD,EAAAxD,gBAAiB,SAAA3B,GACnD,GAAM4B,GAA4B5B,EAAG4B,QAC/B8P,GACFC,KAAM/P,EAAQ6K,KACdmF,KAAM,eAGJC,EAAI,GAAIR,cAAazP,EAAQ4K,KAAMkF,EACzCG,GAAEC,QAAU,gBAKxBV,IAzCa3T,GAAA2T,oBAAmBA,2tBCrChC,IAAAW,GAAA,WAQI,QAAAA,GAAoBxM,EACRrD,GADQlE,KAAAuH,YAAAA,EACRvH,KAAAkE,GAAAA,EACJlE,KAAKgU,aAAe,GAAIC,GAAAb,oBAAoBlP,GAuCxD,MApCI6P,GAAArS,UAAA8H,gBAAA,SAAgBC,EAA6BC,GACzCD,EAAOS,MACDL,OAAQ,GAAI,oBAAqB1H,KAAM,eAAgB2H,SAAU,0CAGvE9J,KAAK0J,OAASA,GAGlBqK,EAAArS,UAAAgJ,SAAA,WAAA,GAAAnI,GAAAvC,IACIA,MAAK+P,4BAA8B/P,KAAKkE,GAAGyG,UAAU3D,EAAAvD,uBAAwB,SAAAzB,GACzEO,EAAK2R,kBAA2ClS,EAAGT,SAGvDvB,KAAKkU,kBAAkBlU,KAAKuH,YAAYlD,cAEpCrE,KAAKuH,YAAYlD,eAAiB6I,EAAAnJ,gBAAgB6C,WAClD5G,KAAKuH,YAAYhD,SAIzBwP,EAAArS,UAAA0L,SAAA,WACIpN,KAAK+P,4BAA4B1C,WAG7B0G,EAAArS,UAAAwS,kBAAR,SAA0B3S,GAClBA,IAAU2L,EAAAnJ,gBAAgB9B,QAC1BjC,KAAK0J,OAAOmB,gBAAgB,SAC5B7K,KAAKgU,aAAalN,QAChBvF,IAAU2L,EAAAnJ,gBAAgBO,cAC5BtE,KAAKmU,gBAAiB,EACtBnU,KAAKgU,aAAalN,SAElB9G,KAAKmU,gBAAiB,EACtBnU,KAAKgU,aAAazP,UA/C9BwP,EAAAzQ,YAACC,EAAAC,mFACY/D,GAAAsU,KAAIA,ysBCAjB,IAAAK,GAAA,WAMI,QAAAA,GAAoBhL,EAA+BM,EAAwBnI,EAAc0C,GAArEjE,KAAAoJ,QAAAA,EAA+BpJ,KAAA0J,OAAAA,EAAwB1J,KAAAuB,MAAAA,CACvE,IAAIC,GAAWC,OAAOD,QACtBxB,MAAKqU,cAAgBpQ,EAASpE,WAC1BoE,EAAS7D,YACT,4BACAkI,mBAAmB9G,EAAS+Q,SAAW,KAAO/Q,EAASgR,KAAOhO,EAAAC,QAAY3E,cA2BtF,MAxBIsU,GAAA1S,UAAAqG,MAAA,WAAA,GAAAxF,GAAAvC,IACIA,MAAKoJ,QAAQrB,MAAM/H,KAAKuB,MAAMoB,UACzBgF,KAAK,WACFpF,EAAKmH,OAAOmB,gBAAgB,UAE/BhD,MAAM,SAACjG,GACJW,EAAKX,MAAQA,KAIzBwS,EAAA1S,UAAA+N,SAAA,WAAA,GAAAlN,GAAAvC,IACIA,MAAKoJ,QAAQjB,SACbnI,KAAKoJ,QAAQ5B,SAAQ,GAChBG,KAAK,SAAA2M,GACF/R,EAAK0Q,MAAQqB,EACb/R,EAAK6G,QAAQN,4BACRnB,KAAK,SAAA4M,GAAa,MAAAhS,GAAKgS,UAAYA,IACnC1M,MAAM,SAAA7F,GAAK,MAAAO,GAAKX,MAAQI,MAEhC6F,MAAM,SAAA7F,GACH,MAAAO,GAAKX,MAAQI,KAnC7BoS,EAAA9Q,YAACC,EAAAC,8FACY/D,GAAA2U,MAAKA,6ECRlB,SAAArL,GAA0BU,IAAVhK,EAAAsJ,UAASA,ICFzByL,OAAA,gDAAA,UAAA,UAAA,+BAAA,cAAA,qBAAA,0BAAA,sBAAA,SAAAC,EAAAhV,EAAAiV,EAAAC,EAAAC,EAAAC,EAAAC,GACA,YAIA,IAAAC,GAAA,WACA,QAAAA,GAAAC,GACAhV,KAAAgV,UAAAA,EAsFA,MA9EAD,GAAArT,UAAAuT,UAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAE,MAEA,IAAAA,YAAAC,SACA,MAAAD,EAGA,KAAA,GAAA9J,GAAA,EAAAgK,EAAAH,EAAAI,YAAAjG,OAAAhE,EAAAgK,EAAAhK,IAAA,CACA,GAAAkF,GAAA2E,EAAAI,YAAAjK,EACA,IAAAkF,EAAAgF,YAAAJ,EAAA,CACA,GAAAK,GAAAjF,EAAAkF,UAAAhO,IAAAiN,EAAAgB,IAAAN,QACA,IAAAI,EACA,MAAAA,EAEA,MAAA,IAAAxT,OAAA,wCAAAiT,EAAAU,iBAAA,OAGA,KAAA,IAAA3T,OAAA,wCAAAiT,EAAAU,iBAAA,OAEAb,EAAArT,UAAAmU,KAAA,SAAAX,EAAAY,EAAAC,EAAAC,GACA,GAIAxF,GAJAjO,EAAAvC,KAEAoV,EAAApV,KAAAiV,UAAAC,EAAAY,EAUA,IAPAC,YAAAlB,GAAAoB,qBACAzF,EAAAuF,GAGAvF,EAAAsF,EAAAJ,UAAAhO,IAAAgN,EAAAwB,SAAAC,GAAAtB,EAAAoB,uBACAD,EAAAD,GAEA,OAAAvF,EACA,KAAA,IAAAvO,OAAA,kDAEAuO,GAAA4F,gBAAAlB,EAAAE,EAAAY,GACAd,EAAAmB,qBAAA7F,EACAA,EAAAE,kBAAAoE,EAAApE,gBAAA/K,QACAuP,EAAAoB,qBAAApB,EAAAqB,aACArB,EAAAqB,aAAA,SAAA7W,GACAM,KAAAsW,qBAAA5W,GACAM,KAAAqW,qBAAAG,gBAAAxW,QAGAwQ,EAAAE,kBAAAoE,EAAApE,gBAAA+F,OACAvB,EAAAwB,oBAAA,WACAnU,EAAAyS,UAAA2B,eAAA,WAAA,MAAAnG,GAAAgG,gBAAAtB,MAEAA,EAAA0B,eAAAxB,EACAA,EAAAyB,iBAAA,OAAA3B,EAAAwB,sBAEAlG,EAAAE,kBAAAoE,EAAApE,gBAAAoG,SACA5B,EAAA6B,qBAAA7B,EAAA8B,aACA9B,EAAA8B,aAAA,SAAAtX,GACAM,KAAA+W,qBAAArX,GACAM,KAAAqW,qBAAAY,aAAAjX,SAIA+U,EAAArT,UAAAwV,OAAA,SAAAhC,GAEAA,EAAAoB,uBACApB,EAAAqB,aAAArB,EAAAoB,qBACApB,EAAAoB,qBAAA,MAEApB,EAAA6B,uBACA7B,EAAA8B,aAAA9B,EAAA6B,qBACA7B,EAAA6B,qBAAA,MAEA7B,EAAAwB,sBACAxB,EAAA0B,eAAAO,oBAAA,OAAAjC,EAAAwB,qBACAxB,EAAAwB,oBAAA,KACAxB,EAAA0B,eAAA,MAEA1B,EAAAmB,qBAAAe,kBAAAlC,GACAA,EAAAmB,qBAAA,MAEAtB,EAAAsC,QAAAzC,EAAA0C,WACAvC,IAEAtV,GAAAsV,wBAAAA,IC/FAP,OAAA,4CAAA,UAAA,UAAA,cAAA,qBAAA,kBAAA,sBAAA,SAAAC,EAAAhV,EAAA8X,EAAAzC,EAAA0C,EAAAC,GACA,YAMA,IAAAxB,GAAA,WACA,QAAAA,GAAAyB,GACA1X,KAAA0X,UAAAA,EAEA1X,KAAA2X,SAAA,GAAAC,KAEA5X,KAAA6X,aAIA7X,KAAA6B,UAIA7B,KAAA8X,YAAA,EAEA9X,KAAA+X,SAAA,GAAAH,KAEA5X,KAAAgY,QAAA,GAAAJ,KAIA5X,KAAA0Q,gBAAAoE,EAAApE,gBAAA+F,KAEAzW,KAAAiY,iBAAA1R,QAAAC,UAuQA,MAhQAyP,GAAAvU,UAAAwW,UAAA,SAAAC,EAAAnC,GACAhW,KAAAgY,QAAAI,IAAAD,EAAAnC,IAMAC,EAAAvU,UAAA2W,aAAA,SAAAF,GACAnY,KAAAgY,QAAA9F,OAAAiG,GACAnY,KAAAsY,kBAAA,QAAAtY,KAAA6B,OAAA0W,OAAA,SAAA3W,GAAA,MAAAA,GAAAuW,SAAAA,SAKAlC,EAAAvU,UAAA8W,SAAA,SAAA5U,EAAAuU,EAAAM,GACA,GAAA7W,GAAA,GAAA6V,GAAAiB,mBAAA9U,EAAAuU,EAAAM,EAEA,OADAzY,MAAAsY,kBAAA,eAAA1W,IACAA,GAKAqU,EAAAvU,UAAAiX,YAAA,SAAA/W,GACA5B,KAAA6B,OAAA+L,QAAAhM,MAAA,GACA5B,KAAAsY,kBAAA,SAAA1W,QAOAqU,EAAAvU,UAAAkX,YAAA,SAAAC,GACA,GAAAtW,GAAAvC,IACAA,MAAA6X,UAAA5W,KAAA4X,GACAA,EAAAC,QACAC,KAAA,WACAD,OAAA9Y,KAAA6B,OAAAqI,IAAA,SAAAtI,GAAA,OAAAA,MAAAA,EAAAmW,SAAAxV,EAAAwV,SAAArQ,IAAA9F,MACAoX,eAOA/C,EAAAvU,UAAAuX,eAAA,SAAAJ,GACA,GAAAtW,GAAAvC,IACAA,MAAA6X,UAAAhK,OAAA7N,KAAA6X,UAAAjK,QAAAiL,GAAA,GACAA,EAAAC,QACAC,KAAA,QACAD,UACAE,SAAAhZ,KAAA6B,OAAAqI,IAAA,SAAAtI,GAAA,OAAAA,MAAAA,EAAAmW,SAAAxV,EAAAwV,SAAArQ,IAAA9F,SASAqU,EAAAvU,UAAA0U,gBAAA,SAAAlB,EAAAE,EAAAY,GACAhW,KAAA2X,SAAAS,IAAAlD,GAAAE,OAAAA,EAAAY,MAAAA,KAMAC,EAAAvU,UAAA0V,kBAAA,SAAAlC,GACAlV,KAAAiX,aAAA/B,GACAlV,KAAA2X,SAAAzF,OAAAgD,IAMAe,EAAAvU,UAAAwX,wBAAA,SAAA9O,GACA,GAAAA,EAAA,CACA,GACA+O,GADAC,EAAAhP,EAAA+N,OAAAkB,EAAAjP,EAAAqO,aAAAa,EAAAlP,EAAA4L,KASA,OANAmD,GADA/O,EAAAqO,aACA,SAAAc,GAAA,MAAAA,GAAApB,SAAAiB,GAAAG,EAAAd,eAAAY,GAGA,SAAAE,GAAA,MAAAA,GAAApB,SAAAiB,GAGAE,GAAAA,EAAA1L,QACA,SAAA2L,GAAA,MAAAJ,GAAAI,IAAAD,EAAA1L,QAAA2L,EAAAC,SAAA,GAEAL,EAGA,MAAA,YAAA,OAAA,IAOAlD,EAAAvU,UAAAyR,SAAA,SAAA/I,GACA,GAEAqP,GAFAlX,EAAAvC,IAGA,IAAAoK,EAAA,CACA,GAAAsP,GAAAtP,EAAA+N,OAAAwB,EAAAvP,EAAAqO,aAAAmB,EAAAxP,EAAA4L,KAEA4D,GAAAA,GAAA5Z,KAAAgY,QAAAtQ,IAAAgS,GAIAD,EAFArW,SAAAgH,EAAAqO,aAEA,WAAA,MAAAlW,GAAAmV,UAAAmC,eAAAH,EAAAE,IAIA,WAAA,MAAArX,GAAAmV,UAAAoC,iBAAAJ,EAAAC,EAAAC,QAKAH,GAAA,WAEA,IAAA,GADAM,MACAC,EAAA,EAAAC,EAAAjZ,MAAAwN,KAAAjM,EAAAyV,SAAAgC,EAAAC,EAAA3K,OAAA0K,IAAA,CACA,GAAAE,GAAAD,EAAAD,GAAA7B,EAAA+B,EAAA,GAAAlE,EAAAkE,EAAA,EACAH,GAAA9Y,KAAAsB,EAAAmV,UAAAmC,eAAA1B,EAAAnC,IAEA,IAAA,GAAAmE,GAAA,EAAAC,EAAApZ,MAAAwN,KAAAjM,EAAAoV,UAAAwC,EAAAC,EAAA9K,OAAA6K,IAAA,CACA,GAAAE,GAAAD,EAAAD,GAAAjF,EAAAmF,EAAA,GAAArE,EAAAqE,EAAA,GAAArE,MACAsE,EAAA9C,EAAA+C,gBAAArF,EAAAU,iBAAAV,EAAAY,QAAAqC,EAAAmC,EAAAnC,OAAAM,EAAA6B,EAAA7B,YACAlW,GAAAyV,QAAAwC,IAAArC,IAGA4B,EAAA9Y,KAAAsB,EAAAmV,UAAAoC,iBAAA3B,EAAAM,EAAAzC,IAEA,MAAAzP,SAAAkU,IAAAV,GAAApS,KAAA,SAAA+S,GAAA,MAAAA,GAAAC,OAAA,SAAAhM,EAAAiM,GAAA,MAAAjM,GAAAkM,OAAAD,UAIA5a,MAAA8X,YAAA,CACA,IAAAgD,GAAA9a,KAAAiY,iBACAtQ,KAAA8R,GACA9R,KAAA,SAAAoT,GACA,GAAAC,GAAAzY,EAAA2W,wBAAA9O,GACA6Q,EAAA1Y,EAAAV,OAAA0W,OAAAyC,EAKA,OAJAzY,GAAA+V,kBAAA,WAAA2C,EAAAF,GACAD,IAAAvY,EAAA0V,mBACA1V,EAAAuV,YAAA,GAEAiD,IAEAlT,MAAA,SAAAjG,GAIA,MAFAW,GAAAuV,YAAA,EACAvV,EAAA0V,iBAAA1R,QAAAC,UACAD,QAAAE,OAAA7E,IAGA,OADA5B,MAAAiY,iBAAA6C,EACAA,GAMA7E,EAAAvU,UAAAwZ,MAAA,SAAA9Q,GACA,GAAA4Q,GAAAhb,KAAAkZ,wBAAA9O,GACA6Q,EAAAjb,KAAA6B,OAAA0W,OAAAyC,EACAhb,MAAAsY,kBAAA,QAAA2C,OAKAhF,EAAAvU,UAAAyZ,sBAAA,SAAAlB,GAGA,IAAA,GAFA9B,GAAA8B,EAAA9B,OAAAM,EAAAwB,EAAAxB,aACAV,KACAiC,EAAA,EAAAE,EAAAlZ,MAAAwN,KAAAxO,KAAA2X,UAAAqC,EAAAE,EAAA5K,OAAA0K,IAAA,CACA,GAAAG,GAAAD,EAAAF,GAAA9E,EAAAiF,EAAA,GAAA/E,EAAA+E,EAAA,GAAA/E,OACAgF,EAAA5C,EAAA+C,gBAAArF,EAAAU,iBAAAV,EAAAY,QAAAsF,EAAAhB,EAAAjC,OAAAkD,EAAAjB,EAAA3B,YACA2C,KAAAjD,GAAAkD,IAAA5C,GACAV,EAAA9W,KAAAmU,GAGA,MAAA2C,IAEA9B,EAAAvU,UAAA4W,kBAAA,SAAAS,EAAAkC,EAAAF,GAEA,GAAA3Q,IACA2O,KAAAA,EACAD,UACAE,YAGA+B,GAAAA,EAAAO,MAAA,EA6BA,KAAA,GA3BAC,GAAA,SAAAC,GAEA,GAAAzD,GAAA0D,EAAA1D,SAAArQ,IAAA8T,EAEAC,GAAA1D,SAAA7F,OAAAsJ,GAEApR,EAAA4O,SAAA/X,MAAAW,MAAA4Z,EAAAzD,SAAAA,GAEA,IAAA2D,GAAAX,EAAAnI,UAAA,SAAA2G,GAAA,MAAAA,GAAAC,OAAAgC,EAAAhC,MAAAD,EAAApB,SAAAqD,EAAArD,QAAAoB,EAAAd,eAAA+C,EAAA/C,cACA,IAAAiD,KAAA,EAEAD,EAAA5Z,OAAAgM,OAAA4N,EAAA5Z,OAAA+L,QAAA4N,GAAA,OAEA,CAEA,GAAAG,GAAAZ,EAAAlN,OAAA6N,EAAA,GAAA,GAEAE,EAAAH,EAAAN,sBAAAQ,EACAF,GAAA1D,SAAAK,IAAAuD,EAAAC,GAEAxR,EAAA0O,OAAA7X,MAAAW,MAAA+Z,EAAA5D,SAAA6D,IAGAH,EAAA5Z,OAAAgM,OAAA4N,EAAA5Z,OAAA+L,QAAA4N,GAAA,EAAAG,KAGAF,EAAAzb,KACAga,EAAA,EAAA6B,EAAAZ,EAAAjB,EAAA6B,EAAAvM,OAAA0K,IAAA,CACA,GAAAwB,GAAAK,EAAA7B,EACAuB,GAAAC,GAGA,IAAA,GAAAvB,GAAA,EAAA6B,EAAAf,EAAAd,EAAA6B,EAAAxM,OAAA2K,IAAA,CACA,GAAArY,GAAAka,EAAA7B,GACAlC,EAAA/X,KAAAmb,sBAAAvZ,EACAwI,GAAA0O,OAAA7X,MAAAW,MAAAA,EAAAmW,SAAAA,IACA/X,KAAA+X,SAAAK,IAAAxW,EAAAmW,GACA/X,KAAA6B,OAAAZ,KAAAW,GAGA,IAAA,GAAAsY,GAAA,EAAAC,EAAAna,KAAA6X,UAAAqC,EAAAC,EAAA7K,OAAA4K,IAAA,CACA,GAAArB,GAAAsB,EAAAD,EACArB,GAAAC,OAAA1O,KAMA6L,EAAAvU,UAAA8U,gBAAA,SAAAtB,GACA,GAAAA,EAAA6G,QAAA,CAGA,GAAA9B,GAAAzC,EAAA+C,gBAAArF,EAAAU,iBAAAV,EAAAY,QAAAqC,EAAA8B,EAAA9B,OAAAM,EAAAwB,EAAAxB,aACAuD,EAAAhc,KAAA2X,SAAAjQ,IAAAwN,GACAc,EAAAgG,EAAAA,EAAAhG,MAAA5S,MACApD,MAAAmT,UAAAgF,OAAAA,EAAAM,aAAAA,EAAAzC,MAAAA,MAKAC,EAAAvU,UAAAuV,aAAA,SAAA/B,GACA,GAAA+E,GAAAzC,EAAA+C,gBAAArF,EAAAU,iBAAAV,EAAAY,QAAAqC,EAAA8B,EAAA9B,OAAAM,EAAAwB,EAAAxB,YACAzY,MAAAkb,OAAA/C,OAAAA,EAAAM,aAAAA,KAEAxC,EAAAoB,QAAAE,EAAA0E,WACAhG,IAEAxW,GAAAwW,qBAAAA,ICxSAzB,OAAA,gCAAA,UAAA,WAAA,SAAAC,EAAAhV,GACA,YAKA,IAAAwc,GAAA,WACA,QAAAA,MAEA,MAAAA,KAEAxc,GAAAwc,UAAAA,ICXAzH,OAAA,uCAAA,UAAA,WAAA,SAAAC,EAAAhV,GACA,YAIAA,GAAAiR,iBAIA+F,KAAA,OAKA9Q,OAAA,SAKAmR,OAAA,YCnBAtC,OAAA,oCAAA,UAAA,UAAA,mBAAA,SAAAC,EAAAhV,EAAAyc,GACA,YACA,SAAAC,GAAAC,EAAAC,EAAAvG,GACA,GAAApW,GAAA2c,EAAAC,SAAAxG,EAAA,KACA,IAAA,OAAApW,IAAA,gBAAAA,IAAA,kBAAAA,IACA,MAAAA,EAQA,MANA,QAAAA,EACAA,EAAA,OAEA0D,SAAA1D,IACAA,EAAA,aAEA,GAAAuC,OAAA,QAAAoa,EAAA,cAAAD,EAAA,kBAAA1c,EAAA,0BAOA,QAAA6a,GAAA6B,EAAAtG,GAEA,IADA,GAAAyG,GAAAH,EACAA,YAAAF,GAAAM,iBAAAJ,YAAAF,GAAAO,gBACAL,EAAAA,EAAAA,UAEA,IAAAjE,GACAM,CACA,IAAA2D,YAAAF,GAAAQ,YACAvE,EAAArC,EAAA6G,eACAlE,EAAA2D,EAAAja,SAEA,IAAAia,YAAAF,GAAAU,aACAzE,EAAAgE,EAAAI,EAAAH,EAAAjE,OAAArC,GACA2C,EAAA2D,EAAAja,SAEA,CAAA,KAAAia,YAAAF,GAAAW,aAKA,KAAA,IAAA5a,OAAA,eAAAsa,EAAA,0DAJApE,GAAAgE,EAAAI,EAAAH,EAAAjE,OAAArC,GACA2C,EAAA2D,EAAAha,IAAAka,SAAAxG,GAKA,OAAAqC,OAAAA,EAAAM,aAAAA,GAEAhZ,EAAA8a,gBAAAA,IC5CA/F,OAAA,uCAAA,UAAA,WAAA,SAAAC,EAAAhV,GACA,YAIA,IAAAiZ,GAAA,WAOA,QAAAA,GAAAc,EAAA5V,EAAAuU,EAAAM,GACA,SAAAA,IAAAA,EAAA,MACAzY,KAAAwZ,KAAAA,EACAxZ,KAAA4D,QAAAA,EACA5D,KAAAmY,OAAAA,EACAnY,KAAAyY,aAAAA,EACAzY,KAAAmB,GAAAuX,EAAAoE,SAMA,MAJApE,GAAAhX,UAAAqb,SAAA,WACA,MAAA/c,MAAA4D,SAEA8U,EAAAoE,OAAA,EACApE,IAEAjZ,GAAAiZ,gBAAAA,IC1BAlE,OAAA,oDAAA,UAAA,UAAA,2BAAA,SAAAC,EAAAhV,EAAAoV,GACA,YAIA,IAAAmI,GAAA,WACA,QAAAA,GAAAtH,GACA1V,KAAA0V,UAAAA,EAqBA,MAnBAsH,GAAAtV,IAAA,SAAAgO,GACA,MAAA,IAAAsH,GAAAtH,IAMAsH,EAAAtb,UAAAub,OAAA,WACA,MAAAjd,MAAA0V,UAAAwH,OAAArI,EAAAoB,uBAMA+G,EAAAtb,UAAA+O,sBAAA,WACA,GAAAD,GAAAxQ,KAAAid,QAEA,OADAjd,MAAA0V,UAAAyH,iBAAAtI,EAAAoB,qBAAAzF,GACAA,GAEAwM,IAEAvd,GAAAud,4BAAAA,EACAA,EAAA,8BAAA,GC/BA,IAAA1Z,YAAAtD,MAAAA,KAAAsD,YAAA,SAAA8Z,EAAAhI,EAAAhT,EAAAib,GACA,GAAAC,GAAAxO,EAAAyO,UAAAjO,OAAArH,EAAA6G,EAAA,EAAAsG,EAAA,OAAAiI,EAAAA,EAAA9d,OAAAie,yBAAApI,EAAAhT,GAAAib,CACA,IAAA,gBAAAI,UAAA,kBAAAA,SAAAC,SAAAzV,EAAAwV,QAAAC,SAAAN,EAAAhI,EAAAhT,EAAAib,OACA,KAAA,GAAA/R,GAAA8R,EAAA9N,OAAA,EAAAhE,GAAA,EAAAA,KAAAgS,EAAAF,EAAA9R,MAAArD,GAAA6G,EAAA,EAAAwO,EAAArV,GAAA6G,EAAA,EAAAwO,EAAAlI,EAAAhT,EAAA6F,GAAAqV,EAAAlI,EAAAhT,KAAA6F,EACA,OAAA6G,GAAA,GAAA7G,GAAA1I,OAAAC,eAAA4V,EAAAhT,EAAA6F,GAAAA,EAEAuM,QAAA,yDAAA,UAAA,UAAA,kBAAA,+BAAA,qBAAA,2BAAA,SAAAC,EAAAhV,EAAAyc,EAAAxH,EAAAiJ,EAAA9I,GACA,YACA,IAAA+I,GAAA,WACA,QAAAA,GAAAC,EAAAC,GACA9d,KAAA6d,gBAAAA,EACA7d,KAAA8d,mBAAAA,EACA9d,KAAA6B,UA+CA,MA7CA+b,GAAAlc,UAAAqc,KAAA,WACA/d,KAAA6B,OAAAkc,KAAA,SAAApP,EAAAiM,GACA,MAAAjM,GAAAqP,QAAA,KAAApD,EAAAoD,QAAA,GACA,EAEA,EAAArP,EAAAqP,QAAA,GAAAC,wBAAArD,EAAAoD,QAAA,IAAA,GAAA,KAGAJ,EAAAlc,UAAAwc,oBAAA,SAAAnG,GACA,GAAAxV,GAAAvC,IACA,OAAA+X,GAAAQ,OAAA,SAAAvW,GAAA,MAAAO,GAAAsb,gBAAAM,SAAAnc,MAEA4b,EAAAlc,UAAAoX,OAAA,SAAA1O,GAQA,IAAA,GAPAmR,GAAA,SAAA3Z,GACA,GAAA+L,GAAA8N,EAAA5Z,OAAA+Q,UAAA,SAAA2G,GAAA,MAAAA,GAAA3X,QAAAA,GACA+L,MAAA,GACA8N,EAAA5Z,OAAAgM,OAAAF,EAAA,IAGA8N,EAAAzb,KACAga,EAAA,EAAAC,EAAA7P,EAAA4O,SAAAgB,EAAAC,EAAA3K,OAAA0K,IAAA,CACA,GAAApY,GAAAqY,EAAAD,GAAApY,KACA2Z,GAAA3Z,GAEA,IAAA,GAAAsY,GAAA,EAAAC,EAAA/P,EAAA0O,OAAAoB,EAAAC,EAAA7K,OAAA4K,IAAA,CACA,GAAAE,GAAAD,EAAAD,GAAAtY,EAAAwY,EAAAxY,MAAAmW,EAAAqC,EAAArC,SACAiG,EAAAhe,KAAAke,oBAAAnG,EACAiG,GAAA1O,QACAtP,KAAA6B,OAAAZ,MAAAW,MAAAA,EAAAoc,QAAAA,IAGAhe,KAAA+d,OACA/d,KAAAN,MAAAM,KAAA6B,QAEA+b,EAAAlc,UAAAmU,KAAA,WACA7V,KAAA8d,qBAAAlF,YAAA5Y,MACAA,KAAAN,MAAAM,KAAA6B,QAEA+b,EAAAlc,UAAAwV,OAAA,WACAlX,KAAA8d,qBAAA7E,eAAAjZ,OAEA4d,EAAAvG,QAAAhC,QAAAX,EAAA0J,KAAAjI,GAAAtB,EAAAoB,uBACA2H,EAAAta,YACAqa,EAAAU,gBAAA,oBAAAnC,EAAArL,YAAAC,SACA8M,KAGAne,GAAAme,gCAAAA,IC7DApJ,OAAA,2DAAA,UAAA,UAAA,2BAAA,SAAAC,EAAAhV,EAAAoV,GACA,YACA,IAAAyJ,GAAA,WACA,QAAAA,MAeA,MAbAA,GAAA5c,UAAA6c,QAAA,SAAApJ,GACAnV,KAAA0V,UAAAP,EAAAO,WAEA4I,EAAA5c,UAAAmU,KAAA,WACA7V,KAAAwQ,WAAAxQ,KAAA0V,UAAAhO,IAAAmN,EAAAoB,sBACAjW,KAAA6Y,SAAA7Y,KAAA0V,UAAAhO,IAAA1H,KAAAN,OACAM,KAAAwQ,WAAAoI,YAAA5Y,KAAA6Y,WAEAyF,EAAA5c,UAAAwV,OAAA,WACAlX,KAAAwQ,WAAAyI,eAAAjZ,KAAA6Y,UACA7Y,KAAAwQ,WAAA,KACAxQ,KAAA6Y,SAAA,MAEAyF,IAEA7e,GAAA6e,kCAAAA,ICpBA9J,OAAA,2CAAA,UAAA,WAAA,SAAAC,EAAAhV,GACA,YAIA,IAAA+e,GAAA,WACA,QAAAA,MA8BA,MAzBAA,GAAApG,IAAA,SAAAhD,EAAAY,GACAZ,YAAAqJ,YACArJ,EAAAA,EAAA1T,WAEAnC,OAAAC,eAAA4V,EAAAoJ,EAAApc,KAAAsc,YAAA,EAAAC,cAAA,EAAAC,UAAA,EAAAlf,MAAAsW,KAKAwI,EAAAK,MAAA,SAAAzJ,GACAA,YAAAqJ,YACArJ,EAAAA,EAAA1T,WAEA0T,EAAAoJ,EAAApc,KAAA,MAKAoc,EAAA9W,IAAA,SAAA0N,GACA,MAAAA,GAAAoJ,EAAApc,MAAA,MAKAoc,EAAApc,IAAA,YACAoc,IAEA/e,GAAA+e,MAAAA,GCtCA,IAAAM,WAAA9e,MAAAA,KAAA8e,WAAA,SAAAxB,EAAA1C,GAEA,QAAAmE,KAAA/e,KAAAgf,YAAA1B,EADA,IAAA,GAAAjC,KAAAT,GAAAA,EAAAqE,eAAA5D,KAAAiC,EAAAjC,GAAAT,EAAAS,GAEAiC,GAAA5b,UAAA,OAAAkZ,EAAArb,OAAA0d,OAAArC,IAAAmE,EAAArd,UAAAkZ,EAAAlZ,UAAA,GAAAqd,IAEAvK,QAAA,wDAAA,UAAA,UAAA,qBAAA,eAAA,sBAAA,UAAA,yBAAA,SAAAC,EAAAhV,EAAAke,EAAApG,EAAAE,EAAA6B,EAAA4F,GACA,YAKA,IAAAC,GAAA,SAAAC,GAEA,QAAAD,GAAAE,EAAAC,GACAF,EAAAG,KAAAvf,MACAA,KAAAqf,gBAAAA,EACArf,KAAAwf,gBAAAF,EAAAE,gBACAxf,KAAAyf,eAAAJ,EAAAI,eAAA5J,KAAAwJ,GA2FA,MAhGAP,WAAAK,EAAAC,GAOAD,EAAAzd,UAAAge,WAAA,SAAAlG,EAAArB,EAAAzY,GACA,GAAA0c,GAAA5C,EAAA5V,SAAA5D,KAAAqf,gBAAAK,WAAAlG,EAAAmG,YACA1F,EAAAT,EAAAoG,SAAAnH,EAAAwB,EAAA9X,KAAA4Q,EAAAkH,EAAAlH,WACA,QAAAA,GAAA,OAAA0F,IACA1F,EAAA/S,KAAAqf,gBAAAI,eAAAhH,GAEA,IAAAoH,IACAC,aAAA/M,EACAgN,cAAAtH,EACAuH,OAAAtgB,EACAugB,QAAA9H,EACA+H,QAAA1G,EAAA/P,OACA0W,gBAAAngB,KAAAyf,eAEA,OAAArD,GAAAE,UAAAK,eAAAxE,EAAA0H,gBAAAA,GAAA7f,KAAAwf,kBAEAL,EAAAzd,UAAAyR,SAAA,SAAAgF,EAAAM,EAAAzC,GACA,GAAAzT,GAAAvC,KACA6B,IAOA,IALAmU,IAEAA,EAAAsD,EAAAkF,MAAA9W,IAAAyQ,KAGAnC,EACA,MAAAzP,SAAAC,QAAA3E,EAmCA,KAAA,GAhCAue,GAAA,OAAA3H,GAAArV,SAAAqV,EACAD,EAAA,SAAAgB,EAAA9Z,GACA,GAAAkE,GAAArB,EAAAmd,WAAAlG,EAAArB,EAAAzY,EACAmC,GAAAZ,KAAA,GAAAwW,GAAAiB,gBAAAc,EAAA5V,EAAAuU,EAAAqB,EAAAoG,SAAAzd,QAGA4X,KACAwB,EAAA,SAAAjQ,GACA,GAAAkO,GAAAxD,EAAA1K,EAEA,KAAA8U,GAAA5G,EAAAoG,SAAAzd,OAAAsW,EACA,MAAA,UAGA,IAAAe,EAAA6G,OAAA7G,EAAA6G,KAAAlI,GACA,MAAA,UAGA,IAAAzY,GAAA,OAAA8Z,EAAAoG,SAAAzd,KAAAgW,EAAAA,EAAAqB,EAAAoG,SAAAzd,MACAme,EAAA9G,EAAA+G,UAAA7gB,EAAAyY,EACA,OAAAmI,aAAA/Z,UACAwT,EAAA9Y,KAAAqf,EAAA3Y,KAAA,SAAA6Y,GACAA,GACAhI,EAAAgB,EAAA9Z,MAGA,iBAEA4gB,GACA9H,EAAAgB,EAAA9Z,KAGA4L,EAAA,EAAAA,EAAA0K,EAAA1G,OAAAhE,IACAiQ,EAAAjQ,EAEA,OAAA,KAAAyO,EAAAzK,OACA/I,QAAAC,QAAA3E,GAEA0E,QAAAkU,IAAAV,GAAApS,KAAA,WAAA,MAAA9F,MASAsd,EAAAzd,UAAAoY,iBAAA,SAAA3B,EAAAM,EAAAzC,GACA,MAAAhW,MAAAmT,SAAAgF,EAAAM,EAAAzC,GAAA,OAQAmJ,EAAAzd,UAAAmY,eAAA,SAAA1B,EAAAnC,GACA,MAAAhW,MAAAmT,SAAAgF,EAAA,KAAAnC,GAAA,OAEAmJ,EAAA9H,QAAA6H,EAAAuB,0BAAA9C,EAAA+C,eACAvB,GACA5H,EAAA0E,UACAxc,GAAA0f,kBAAAA,IC9GA3K,OAAA,yDAAA,UAAA,UAAA,uBAAA,SAAAC,EAAAhV,EAAAkhB,GACA,YAIAlhB,GAAAmhB,oBAIAnc,QAAA,8BACAoc,SAAA,+BACAC,QAAA,8CACAC,MAAA,wCACAC,UAAA,kGACAC,UAAA,uGACAC,SAAA,gGACAC,SAAA,mGACAC,OAAA,oDAKA,IAAAX,GAAA,WACA,QAAAA,GAAAY,GACArhB,KAAAqhB,OAAAA,EA6BA,MAvBAZ,GAAA/e,UAAAge,WAAA,SAAAtd,GACA,GAAAwB,EAOA,OALAA,GADAxB,IAAA3C,GAAAmhB,mBACAnhB,EAAAmhB,mBAAAxe,GAGA3C,EAAAmhB,mBAAA,QAEA5gB,KAAAqhB,OAAAC,aAAA1d,IAQA6c,EAAA/e,UAAA+d,eAAA,SAAAhH,GAEA,GAAA8I,GAAA9I,EAAA+I,MAAA,aAAAC,KAAA,IAEA,OAAAF,GAAAG,OAAA,GAAAC,cAAAJ,EAAAjG,MAAA,IAEAmF,EAAApJ,QAAAsJ,EAAAiB,kBACAnB,IAEAhhB,GAAAghB,0BAAAA,GCvDA,IAAA3B,WAAA9e,MAAAA,KAAA8e,WAAA,SAAAxB,EAAA1C,GAEA,QAAAmE,KAAA/e,KAAAgf,YAAA1B,EADA,IAAA,GAAAjC,KAAAT,GAAAA,EAAAqE,eAAA5D,KAAAiC,EAAAjC,GAAAT,EAAAS,GAEAiC,GAAA5b,UAAA,OAAAkZ,EAAArb,OAAA0d,OAAArC,IAAAmE,EAAArd,UAAAkZ,EAAAlZ,UAAA,GAAAqd,IAEAvK,QAAA,uDAAA,UAAA,UAAA,kBAAA,qBAAA,SAAA,mBAAA,SAAAC,EAAAhV,EAAAyc,EAAAyB,EAAAkE,EAAA3V,GACA,YACA,IAAA0V,GAAA,WACA,QAAAA,GAAAP,EAAAS,GACA9hB,KAAAqhB,OAAAA,EACArhB,KAAA8hB,gBAAAA,EACA9hB,KAAA+hB,sBAAA,GAAA7F,GAAA8F,cAAA,IACAhiB,KAAAiiB,eAAA,GAAA/F,GAAAgG,iBAAA,MACAliB,KAAAmiB,oBAAA,GAAAjG,GAAAgG,iBAAA9e,QACApD,KAAAoiB,SAiDA,MA/CAR,GAAAlgB,UAAA2gB,SAAA,SAAAC,GAEA,MAAA,IAAApG,GAAAqG,YAAA,GAAArG,GAAAsG,OAAA,KAAA,GAAAtG,GAAAsG,OAAA,MAAAF,EAAAtiB,KAAAiiB,gBAAA,GAAA/F,GAAAsG,OAAA,MAAAF,EAAAtiB,KAAAmiB,sBAAAniB,KAAA+hB,sBAAA,GAAA7F,GAAAuG,WAAAH,EAAA,iBAEAV,EAAAlgB,UAAA4f,aAAA,SAAA1d,GACA,GAAAR,SAAApD,KAAAoiB,MAAAxe,GACA,MAAA5D,MAAAoiB,MAAAxe,EAEA,IAAA8e,GAAA1iB,KAAA8hB,gBAAAa,mBAAA,KAAA/e,EACA,IAAA,OAAA8e,EACA,MAAA,IAAAxG,GAAA8F,cAAApe,EAGA,KAAA,GADAwY,GAAA,GAAAF,GAAA8F,cAAAU,EAAA,IACApX,EAAA,EAAAA,EAAAoX,EAAApT,OAAAhE,GAAA,EACA8Q,EAAA,GAAAF,GAAAsG,OAAA,IAAApG,EAAA,GAAAF,GAAAsG,OAAA,IAAAxiB,KAAAqiB,SAAAK,EAAApX,IAAA,GAAA4Q,GAAA8F,cAAAU,EAAApX,EAAA,KAIA,OAFAsX,GAAAzP,SAAAiJ,EAAAxY,GACA5D,KAAAoiB,MAAAxe,GAAAwY,EACAA,GAEAwF,EAAAlgB,UAAAmhB,sBAAA,SAAAC,GACA,GAAAC,GAAA,mGACAC,EAAA,4CACAC,EAAAF,EAAA7f,KAAA4f,IAAAE,EAAA9f,KAAA4f,EACA,IAAA,OAAAG,EACA,KAAA,IAAAhhB,OAAA,uCAAA6gB,EAEA,OAAA9iB,MAAAqhB,OAAA6B,MAAAD,EAAA,KAEArB,EAAAlgB,UAAAyhB,cAAA,SAAAvD,GACA,GAAAwD,EAOA,IALAA,EADAvB,EAAAwB,SAAAzD,GACA5f,KAAAqhB,OAAA6B,MAAAtD,GAGA5f,KAAA6iB,sBAAAjD,EAAA7C,YAEAqG,YAAAlH,GAAAQ,aACA0G,YAAAlH,GAAAU,cAAAwG,EAAAjL,iBAAA+D,GAAAQ,YACA,OACAva,KAAAihB,EAAAjhB,KACA4Q,YAAA,KAGA,MAAA,IAAA9Q,OAAA,qBAAAmhB,EAAA,MAEAxB,EAAAvK,QAAA6E,EAAAoH,OAAA3F,EAAA4F,iBACA3B,IAEAniB,GAAAmiB,iBAAAA,CACA,IAAAgB,GAAA,SAAAxD,GAEA,QAAAwD,GAAAY,GACApE,EAAAG,KAAAvf,SACAA,KAAAwjB,gBAAAA,EAeA,MAlBA1E,WAAA8D,EAAAxD,GAKAwD,EAAAzP,SAAA,SAAAiJ,EAAAoH,GACA,GAAAC,GAAA,GAAAb,GAAAY,EACApH,GAAAsH,OAAAD,IAEAb,EAAAlhB,UAAAiiB,iBAAA,SAAAC,GACA,GAAA,IAAAA,EAAAC,SACA,KAAA,IAAA5hB,OAAA,gEAEA,cAAA,eAAA,QAAA,SAAA,SAAA,kBAAA2L,QAAAgW,EAAAzhB,SAAA,GACA+J,EAAA4X,UAAA,sBACAC,KAAA,yBAAAH,EAAAzhB,KAAA,iBAAAyhB,EAAAzhB,KAAA,2CAAAnC,KAAAwjB,gBAAA,OAGAZ,GACA1G,EAAA8H,SACAvkB,GAAAmjB,2BAAAA,ICvFApO,OAAA,0CAAA,UAAA,WAAA,SAAAC,EAAAhV,GACA,YACA,SAAA4jB,GAAA3jB,GACA,MAAA,oBAAAH,OAAAmC,UAAAqb,SAAAwC,KAAA7f,GAEAD,EAAA4jB,SAAAA,ICLA7O,OAAA,sDAAA,UAAA,UAAA,SAAA,UAAA,yBAAA,SAAAC,EAAAhV,EAAAoiB,EAAAvI,EAAA4F,GACA,YAIA,IAAA+E,GAAA,WACA,QAAAA,GAAArE,EAAAW,EAAA9W,EAAAya,EAAAC,EAAA9C,GACA,SAAA5X,IAAAA,MACAzJ,KAAAkkB,aAAAA,EACAlkB,KAAAmkB,YAAAA,EACAnkB,KAAAqhB,OAAAA,EACArhB,KAAAwZ,MACAoG,SAAAA,EACAW,UAAAA,EACA9W,OAAAA,EACA4W,KAAA,KACAV,WAAA,UACA/b,QAAA,MAEA5D,KAAAkkB,aAAAlO,MAAA/U,KAAAjB,KAAAwZ,MAkJA,MA7IAyK,GAAAviB,UAAA0iB,eAAA,SAAAhiB,GAGA,MAFApC,MAAAwZ,KAAAmG,WAAAvd,EACApC,KAAAwZ,KAAA5V,QAAA,KACA5D,MAKAikB,EAAAviB,UAAA2P,YAAA,SAAAzN,GAGA,MAFA5D,MAAAwZ,KAAAmG,WAAA,SACA3f,KAAAwZ,KAAA5V,QAAA5D,KAAAqhB,OAAAC,aAAA1d,GACA5D,MAOAikB,EAAAviB,UAAA2e,KAAA,SAAAE,GAEA,MADAvgB,MAAAwZ,KAAA6G,KAAAE,EACAvgB,MAMAikB,EAAAviB,UAAA2iB,IAAA,SAAAA,GAEA,MADArkB,MAAAwZ,KAAA6K,IAAAA,EACArkB,MAOAikB,EAAAviB,UAAAwP,OAAA,SAAAoT,GACA,MAAAtkB,MAAAkkB,aAAAhT,OAAAoT,IAKAL,EAAAviB,UAAA6iB,aAAA,WACA,MAAAvkB,MAAAkkB,aAAAK,gBAEAhlB,OAAAC,eAAAykB,EAAAviB,UAAA,SAIAgG,IAAA,WACA,MAAA1H,MAAAkkB,aAAAlO,OAEA0I,YAAA,EACAC,cAAA,IAMAsF,EAAAviB,UAAA6P,GAAA,SAAA6D,GACA,MAAApV,MAAAkkB,aAAA3S,GAAA6D,IASA6O,EAAAviB,UAAAyP,UAAA,SAAAoP,EAAA9W,GACA,MAAAzJ,MAAAmkB,YAAAhT,UAAAoP,EAAA9W,IAOAwa,EAAAviB,UAAA4P,cAAA,SAAAnP,GAEA,IAAA,GADAqiB,MACAxK,EAAA,EAAAA,EAAAuD,UAAAjO,OAAA0K,IACAwK,EAAAxK,EAAA,GAAAuD,UAAAvD,EAEA,QAAAC,EAAAja,KAAAmkB,aAAA7S,cAAAmT,MAAAxK,GAAA9X,GAAA0Y,OAAA2J,GACA,IAAAvK,IAMAgK,EAAAviB,UAAAmf,SAAA,WACA,MAAA7gB,MAAAmkB,YAAAtD,YAOAoD,EAAAviB,UAAAof,QAAA,SAAA/d,GACA,MAAA/C,MAAAmkB,YAAArD,QAAA/d,IAMAkhB,EAAAviB,UAAAqf,MAAA,WACA,MAAA/gB,MAAAmkB,YAAApD,SAMAkD,EAAAviB,UAAAsf,UAAA,SAAA1R,GACA,MAAAtP,MAAAmkB,YAAAnD,UAAA1R,IAMA2U,EAAAviB,UAAAuf,UAAA,SAAA3R,GACA,MAAAtP,MAAAmkB,YAAAlD,UAAA3R,IAMA2U,EAAAviB,UAAAwf,SAAA,SAAAwD,GACA,MAAA1kB,MAAAmkB,YAAAjD,SAAAwD,IAMAT,EAAAviB,UAAAyf,SAAA,SAAAuD,GACA,MAAA1kB,MAAAmkB,YAAAhD,SAAAuD,IAMAT,EAAAviB,UAAA0f,OAAA,SAAAuD,GACA,MAAA3kB,MAAAmkB,YAAA/C,OAAAuD,IAEAV,IAEAxkB,GAAAwkB,qBAAAA,CAIA,IAAAW,GAAA,WACA,QAAAA,GAAAV,EAAA7C,EAAAzB,GACA5f,KAAAkkB,aAAAA,EACAlkB,KAAAqhB,OAAAA,EACArhB,KAAA4f,SAAAA,EA+GA,MA1GAgF,GAAAljB,UAAAqR,YAAA,SAAA5Q,GAEA,MADAnC,MAAA4f,SAAA7M,YAAA5Q,EACAnC,MAQA4kB,EAAAljB,UAAAyP,UAAA,SAAAoP,EAAA9W,GACA,MAAA,IAAAwa,GAAAjkB,KAAA4f,SAAAW,EAAA9W,EAAAzJ,KAAAkkB,aAAAlkB,KAAAA,KAAAqhB,SAOAuD,EAAAljB,UAAA4P,cAAA,SAAAnP,GAGA,IAAA,GAFAI,GAAAvC,KACAwkB,KACAxK,EAAA,EAAAA,EAAAuD,UAAAjO,OAAA0K,IACAwK,EAAAxK,EAAA,GAAAuD,UAAAvD,EAEA,IAAAR,GAAAoL,EAAAC,YAAA1iB,EACA,KAAAqX,EAAA,CAGA,GADAA,EAAAxZ,KAAAmC,GACAqX,YAAAiF,UACA,MAAAjF,GAAA+F,KAAAkF,MAAAjL,GAAAxZ,MAAA6a,OAAA2J,GAEA,MAAA,IAAAviB,OAAA,mBAAAE,EAAA,qBAEA,GAAAsH,GAAA+P,EAAAsL,aAAAtL,EAAAsL,aAAAL,MAAAjL,EAAAgL,GAAAphB,MACA,OAAApD,MAAAmR,UAAA,SAAAzR,EAAA0R,GAAA,OAAA6I,EAAAT,EAAA+G,WAAAhB,KAAAkF,MAAAxK,GAAA1X,EAAA7C,EAAA0R,GAAAyJ,OAAA2J,GAAA,IAAAvK,IAAAxQ,GACA2a,eAAAjiB,IAMAyiB,EAAAljB,UAAAmf,SAAA,WACA,MAAA7gB,MAAAmR,UAAA,SAAAzR,GACA,MAAA,QAAAA,GACA0D,SAAA1D,KACAmiB,EAAAwB,SAAA3jB,KAAA,KAAAqlB,KAAArlB,MACA0kB,eAAA,aAOAQ,EAAAljB,UAAAof,QAAA,SAAA/d,GACA,MAAA/C,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAA,IAAAA,EAAA4P,QAAAvM,EAAAgiB,KAAArlB,KACA0kB,eAAA,YAMAQ,EAAAljB,UAAAqf,MAAA,WACA,MAAA/gB,MAAA8gB,QAAA,04BACAsD,eAAA,UAMAQ,EAAAljB,UAAAsf,UAAA,SAAA1R,GACA,MAAAtP,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAA,IAAAA,EAAA4P,QAAA5P,EAAA4P,QAAAA,IAAAA,OAAAA,IACA8U,eAAA,cAMAQ,EAAAljB,UAAAuf,UAAA,SAAA3R,GACA,MAAAtP,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAA,IAAAA,EAAA4P,QAAA5P,EAAA4P,QAAAA,IAAAA,OAAAA,IACA8U,eAAA,cAMAQ,EAAAljB,UAAAwf,SAAA,SAAAwD,GACA,MAAA1kB,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAAA,EAAA4P,QAAAoV,IAAAA,MAAAA,IACAN,eAAA,aAMAQ,EAAAljB,UAAAyf,SAAA,SAAAuD,GACA,MAAA1kB,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAAA,EAAA4P,QAAAoV,IAAAA,MAAAA,IACAN,eAAA,aAMAQ,EAAAljB,UAAA0f,OAAA,SAAAuD,GACA,MAAA3kB,MAAAmR,UAAA,SAAAzR,GAAA,MAAA,QAAAA,GAAA0D,SAAA1D,GAAA,KAAAA,GAAAA,IAAAilB,IAAAA,cAAAA,IACAP,eAAA,WAEAQ,EAAAC,eACAD,IAEAnlB,GAAAmlB,YAAAA,CAIA,IAAAI,GAAA,WACA,QAAAA,GAAA3D,GACArhB,KAAAqhB,OAAAA,EAIArhB,KAAAgW,SA+BA,MAzBAgP,GAAAtjB,UAAAwP,OAAA,SAAA0O,GAEA,MADA5f,MAAAilB,oBACA,GAAAL,GAAA5kB,KAAAA,KAAAqhB,OAAArhB,KAAAqhB,OAAA8B,cAAAvD,KAKAoF,EAAAtjB,UAAA6iB,aAAA,WAEA,MADAvkB,MAAAilB,oBACA,GAAAL,GAAA5kB,KAAAA,KAAAqhB,QAAAlf,KAAA,KAAA4Q,YAAA,QAMAiS,EAAAtjB,UAAA6P,GAAA,SAAA6D,GAEA,MADAkE,GAAAkF,MAAApG,IAAAhD,EAAApV,KAAAgW,OACAhW,MAEAglB,EAAAtjB,UAAAujB,kBAAA,WACA,IAAAjlB,KAAAqhB,OAGA,KAAA,IAAApf,OAAA,2EAEA+iB,IAEAvlB,GAAAulB,aAAAA,CAIA,IAAA/T,GAAA,WACA,QAAAA,MA4CA,MA1CAA,GAAAiU,WAAA,SAAA7D,GACApQ,EAAAoQ,OAAAA,GAMApQ,EAAAC,OAAA,SAAA0O,GACA,MAAA,IAAAoF,GAAA/T,EAAAoQ,QAAAnQ,OAAA0O,IAKA3O,EAAAsT,aAAA,WACA,MAAA,IAAAS,GAAA/T,EAAAoQ,QAAAkD,gBASAtT,EAAAkU,WAAA,SAAAhjB,EAAAoe,EAAA3c,EAAAkhB,GACA5F,EAAA0B,mBAAAze,GAAAyB,EACAghB,EAAAC,YAAA1iB,IAAAoe,UAAAA,EAAAuE,aAAAA,IAOA7T,EAAAmU,YAAA,SAAApP,EAAAqO,GACA,MAAArO,GAAAuC,OAAA,SAAAtQ,GAAA,MAAAA,GAAAoc,MAAAA,KAMApT,EAAAoU,IAAA,SAAAjQ,GACAkE,EAAAkF,MAAAK,MAAAzJ,IAEAnE,IAEAxR,GAAAwR,gBAAAA,IC9XAuD,OAAA,iBAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,o8CCAA+U,OAAA,qBAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA;GCAA+U,OAAA,qCAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,gTCAA+U,OAAA,yBAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,+eCAA+U,OAAA,gCAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,6KCAA+U,OAAA,+CAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,2rBCAA+U,OAAA,0CAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,qTCAA+U,OAAA,6CAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,mNCAA+U,OAAA,kCAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,uXCAA+U,OAAA,2BAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,4kDCAA+U,OAAA,2BAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,o5BCAA+U,OAAA,wBAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA,mhBCAA+U,OAAA,yBAAA,UAAA,SAAA8Q,GAAAA,EAAA7lB,QAAA","file":"app-bundle.js.map","sourceRoot":"..\\src","sourcesContent":["export default {\r\n  debug: true,\r\n  testing: false,\r\n  apiBaseUrl: 'https://chatle-server.herokuapp.com',\r\n  redirectPath: ''\r\n};\r\n","export class Settings {\r\n    apiBaseUrl = 'http://localhost:5000';\r\n    userAPI = '/api/users';\r\n    convAPI = '/api/chat/conv';\r\n    chatAPI = '/api/chat';\r\n    accountdAPI = \"/account\";\r\n}","/**\r\n * Manage connected user state\r\n */\r\nexport class State {\r\n    userName: string;\r\n    isGuess: boolean;\r\n}","class Key {\r\n    IDBCursorWithValue: string;\r\n}\r\n\r\nclass ErrorMessage {\r\n    errorMessage: string;\r\n}\r\n\r\nexport class ServiceError {\r\n    key: string;\r\n    subKey: Key;\r\n    errors: Array<ErrorMessage>;\r\n}\r\n\r\n","export class Attendee {\r\n    constructor(public userId?: string) { }\r\n}","export class Message {\r\n    conversationId: string;\r\n    from: string;\r\n    text: string;\r\n    date: Date;\r\n}","import { Conversation } from './conversation';\r\n\r\nexport class User {\r\n    id: string;\r\n    name: string;\r\n    conversation: Conversation;\r\n}","import { Attendee } from './attendee';\r\nimport { Message } from './message';\r\nimport { User } from './user';\r\n\r\nexport class Conversation {\r\n    id: string;\r\n    title: string;\r\n    attendees: Attendee[];\r\n    messages: Message[];\r\n    isInitiatedByUser: boolean;\r\n\r\n    constructor(user?: User) {\r\n        if (!user) {\r\n            return;\r\n        }\r\n        \r\n        let attendees = new Array<Attendee>();\r\n        attendees.push(new Attendee(user.id));\r\n        this.attendees = attendees;\r\n        this.messages = new Array<Message>();\r\n        this.isInitiatedByUser = true;\r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\n\r\nimport { State } from './state'\r\n\r\nimport { ServiceError } from '../model/serviceError';\r\nimport { Conversation } from '../model/conversation';\r\n\r\n@autoinject\r\nexport class Helpers {\r\n    location: Location;\r\n    constructor(private state: State) {\r\n        this.location = window.location;\r\n     }\r\n\r\n    getError(error: any) : Error {\r\n        let errors = <ServiceError[]> error.content;\r\n        let se = errors[0];\r\n        let e = new Error(se.errors[0].errorMessage);\r\n        e.name = se.key;\r\n        return e;\r\n    }\r\n\r\n     setConverationTitle(conversation: Conversation) {\r\n        if (conversation.title) {\r\n            return;\r\n        }\r\n\r\n        let title = '';\r\n        conversation.attendees.forEach(attendee => {\r\n            if (attendee && attendee.userId && attendee.userId !== this.state.userName) {\r\n                title += attendee.userId + ' ';\r\n            }\r\n        });\r\n        conversation.title = title.trim();\r\n    }\r\n\r\n    getUrlParameter(name): string {\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        var results = regex.exec(this.location.search);\r\n        return results === null ? undefined : decodeURIComponent(results[1].replace(/\\+/g, ' '));\r\n    }\r\n}","import { ConnectionState } from '../services/chat.service';\r\n\r\nexport class ConnectionStateChanged {\r\n    constructor(public state: ConnectionState) { }\r\n}","import { Conversation } from '../model/conversation';\r\n\r\nexport class ConversationJoined {\r\n    constructor(public conversation: Conversation) { }\r\n}","import { Message } from '../model/message';\r\n\r\nexport class MessageReceived {\r\n    constructor(public message: Message) { }\r\n}","import { User } from '../model/user';\r\n\r\nexport class UserConnected {\r\n    constructor(public user: User) { }\r\n}","import { Disconnected } from '../services/chat.service'\r\nexport class UserDisconnected {\r\n    constructor(public user: Disconnected) { }\r\n}","import { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { HttpClient } from 'aurelia-http-client';\r\nimport { autoinject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport environment from '../environment';\r\n\r\nimport { Settings } from '../config/settings';\r\nimport { Helpers } from './helpers';\r\nimport { State } from './state';\r\n\r\nimport { User } from '../model/user';\r\nimport { Message } from '../model/message';\r\nimport { Conversation } from '../model/conversation';\r\n\r\nimport { ConnectionStateChanged } from '../events/connectionStateChanged';\r\nimport { ConversationJoined } from '../events/conversationJoined';\r\nimport { MessageReceived } from '../events/messageReceived';\r\nimport { UserConnected } from '../events/userConnected';\r\nimport { UserDisconnected } from '../events/userDisconnected';\r\nimport { ServiceError } from '../model/serviceError';\r\n\r\ninterface ChatSignalR extends SignalR {\r\n    chat: ChatProxy,\r\n    hub: any\r\n}\r\n\r\ninterface ChatProxy {\r\n    client: ChatClient\r\n}\r\n\r\ninterface ChatClient {\r\n    userConnected: (user: User) => void;\r\n    userDisconnected: (user: Disconnected) => void;\r\n    messageReceived: (message: Message) => void;\r\n    joinConversation: (conversation: Conversation) => void;\r\n}\r\n\r\nexport interface Disconnected {\r\n    id: string;\r\n    isRemoved: boolean\r\n}\r\n\r\nexport enum ConnectionState {  \r\n    Connected = 1,\r\n    Disconnected = 2,\r\n    Error = 3\r\n}\r\n\r\n@autoinject\r\nexport class ChatService {\r\n    currentState = ConnectionState.Disconnected;    \r\n    currentConversation: Conversation;\r\n\r\n    constructor(private settings: Settings, \r\n        private ea: EventAggregator, \r\n        private http: HttpClient, \r\n        private state: State, \r\n        private helpers: Helpers) { }\r\n    \r\n    start(): Promise<ConnectionState> {\r\n        \r\n        let debug = environment.debug;\r\n        // only for debug\r\n        let hub = jQuery.connection.hub; \r\n        hub.logging = debug;\r\n        hub.url = this.settings.apiBaseUrl + '/signalr';\r\n        // get the signalR hub named 'chat'\r\n        let connection = <ChatSignalR>jQuery.connection;\r\n        let chatHub = connection.chat;\r\n        \r\n        /**\r\n          * @desc callback when a new user connect to the chat\r\n          * @param User user, the connected user\r\n        */\r\n        chatHub.client.userConnected = user => this.onUserConnected(user);\r\n        /**\r\n          * @desc callback when a new user disconnect the chat\r\n          * @param id, the disconnected user id\r\n        */\r\n        chatHub.client.userDisconnected = user => this.onUserDisconnected(user);\r\n        /**\r\n          * @desc callback when a message is received\r\n          * @param String to, the conversation id\r\n          * @param Message data, the message\r\n        */\r\n        chatHub.client.messageReceived = message => this.onMessageReceived(message);\r\n        /**\r\n          * @desc callback when a new conversation is create on server\r\n          * @param Conv data, the conversation model\r\n        */\r\n        chatHub.client.joinConversation = conversation => this.onJoinConversation(conversation);\r\n\r\n        if (debug) {\r\n            // for debug only, callback on connection state change\r\n            hub.stateChanged(change => {\r\n                let oldState: string,\r\n                    newState: string;\r\n                \r\n                let signalR = jQuery.signalR;\r\n                for (var state in signalR.connectionState) {\r\n                    if (signalR.connectionState[state] === change.oldState) {\r\n                        oldState = state;\r\n                    }\r\n                    if (signalR.connectionState[state] === change.newState) {\r\n                        newState = state;\r\n                    }\r\n                }\r\n\r\n                console.log(\"Chat Hub state changed from \" + oldState + \" to \" + newState);\r\n            });                        \r\n        }\r\n\r\n        // callback on connection reconnect\r\n        hub.reconnected(() => this.onReconnected());\r\n        // callback on connection error\r\n        hub.error(error => this.onError(error) );\r\n        // callback on connection disconnect\r\n        hub.disconnected(() => this.onDisconnected());\r\n    \r\n        // start the connection\r\n        return new Promise<ConnectionState>((resolve, reject) => {\r\n            hub.start()\r\n                .done(() => { \r\n                    this.setConnectionState(ConnectionState.Connected);\r\n                    resolve(ConnectionState.Connected);\r\n                })\r\n                .fail(error => {\r\n                    this.setConnectionState(ConnectionState.Error)\r\n                    reject(new Error(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    stop() {\r\n        jQuery.connection.hub.stop();\r\n    }\r\n\r\n    private setConnectionState(connectionState: ConnectionState) {\r\n        if (this.currentState === connectionState) {\r\n            return;\r\n        }\r\n        \r\n        console.log('connection state changed to: ' + connectionState);\r\n        this.currentState = connectionState;\r\n        this.ea.publish(new ConnectionStateChanged(connectionState));\r\n    }\r\n       \r\n    private onReconnected() {\r\n        this.setConnectionState(ConnectionState.Connected);\r\n    }\r\n\r\n    private onDisconnected() {\r\n        this.setConnectionState(ConnectionState.Disconnected);\r\n    }\r\n\r\n    private onError(error: any) {\r\n        this.setConnectionState(ConnectionState.Error);\r\n    }\r\n\r\n    private onUserConnected(user: User) {\r\n        console.log(\"Chat Hub new user connected: \" + user.id);\r\n        this.ea.publish(new UserConnected(user));\r\n    }\r\n\r\n    private onUserDisconnected(user: Disconnected) {\r\n        console.log(\"Chat Hub user disconnected: \" + user.id);\r\n        if (user.id !== this.state.userName) {\r\n            this.ea.publish(new UserDisconnected(user));\r\n        }\r\n    }   \r\n\r\n    private onMessageReceived(message: Message) {\r\n        this.ea.publish(new MessageReceived(message));\r\n    }\r\n\r\n    private onJoinConversation(conversation: Conversation) {\r\n        this.helpers.setConverationTitle(conversation);\r\n        this.ea.publish(new ConversationJoined(conversation));\r\n    }\r\n}","export class Provider {\r\n    displayName: string;\r\n    authenticationScheme: string;\r\n}","import { HttpClient, HttpResponseMessage } from 'aurelia-http-client';\r\nimport { autoinject } from 'aurelia-framework';\r\n\r\nimport { Settings } from '../config/settings';\r\nimport { ChatService } from './chat.service';\r\nimport { Helpers } from './helpers';\r\nimport { State } from './state';\r\nimport { Provider } from '../model/provider'\r\n\r\n@autoinject\r\nexport class LoginService {\r\n    private xhrf: string;\r\n\r\n    constructor(private http: HttpClient,\r\n        private settings: Settings,\r\n        private chatService: ChatService,\r\n        private state: State,\r\n        private helpers: Helpers) { }\r\n\r\n    getXhrf(clearCookies?: Boolean): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            if (clearCookies) {\r\n                this.http.get('cls')\r\n                    .then(() => this.setXhrf(resolve, reject))\r\n                    .catch(e => reject(new Error('the service is down')));\r\n            } else if (this.xhrf) {\r\n                resolve(this.xhrf);\r\n            } else {\r\n                this.setXhrf(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    login(userName: string): Promise<string> {\r\n        this.state.isGuess = true;\r\n\r\n        return new Promise<string>((resolve, reject) => {\r\n            this.getXhrf()\r\n                .then(r => {\r\n                    if (this.state.isGuess) {\r\n                        this.loginAsGuess(userName, resolve, reject);\r\n                    }\r\n                })\r\n                .catch(error => reject(error));\r\n        });\r\n    }\r\n\r\n    logoff() {\r\n        if (!this.state.userName) {\r\n            return;\r\n        }\r\n        \r\n        this.chatService.stop();\r\n        this.getXhrf()\r\n            .then(r => { \r\n                this.http.post(this.settings.accountdAPI + '/spalogoff', null);                \r\n            });\r\n\r\n        this.xhrf = undefined;\r\n        this.state.userName = undefined;\r\n    }\r\n\r\n    exists(userName): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            if (!userName) {\r\n                resolve(false);\r\n                return;\r\n            }\r\n\r\n            this.getXhrf()\r\n                .then(r => {\r\n                    this.http.get(this.settings.accountdAPI + \"/exists?userName=\" + encodeURIComponent(userName))\r\n                        .then(response => {\r\n                            resolve(response.content);\r\n                        })\r\n                        .catch(error => {\r\n                            this.manageError(error, reject, new Error('the service is down'));\r\n                        });\r\n                })\r\n                .catch(error => reject(new Error('the service is down')));\r\n        });\r\n    }\r\n\r\n    confirm(userName): Promise<boolean> {\r\n        return new Promise<boolean>((resolve, reject) => {\r\n            this.getXhrf()\r\n                .then(r => {\r\n                    this.http.put(this.settings.accountdAPI + \"/spaExternalLoginConfirmation\", { userName: userName })\r\n                        .then(response => {\r\n                            this.logged(userName, resolve, reject);\r\n                            sessionStorage.setItem('userName', userName);\r\n                        })\r\n                        .catch(error => this.manageError(error, reject, this.helpers.getError(error)));\r\n                })\r\n                .catch(error => reject(new Error('the service is down')));\r\n        });\r\n    }\r\n\r\n    getExternalLoginProviders(): Promise<Array<Provider>> {\r\n        return new Promise<Array<Provider>>((resolve, reject) => {\r\n            this.getXhrf()\r\n                .then(r => {\r\n                    this.http.get(this.settings.accountdAPI + \"/getExternalProviders\")\r\n                        .then(response => {\r\n                            resolve(response.content as Array<Provider>);\r\n                        })\r\n                        .catch(error => this.manageError(error, reject, this.helpers.getError(error)));\r\n                })\r\n                .catch(error => reject(new Error('the service is down')));\r\n        });\r\n    }\r\n\r\n    private setXhrf(resolve: Function, reject: Function) {\r\n        this.http.get('xhrf')\r\n            .then(r => {\r\n                this.xhrf = r.response\r\n                this.http.configure(builder => {\r\n                    builder.withHeader('X-XSRF-TOKEN', this.xhrf);\r\n                });\r\n                resolve(this.xhrf);\r\n            })\r\n            .catch(error => reject(new Error('the service is down')));\r\n    }\r\n\r\n    private loginAsGuess(userName, resolve: Function, reject: Function) {\r\n        this.http.post(this.settings.accountdAPI + '/spaguess', { userName: userName })\r\n            .then(response => {\r\n                this.logged(userName, resolve, reject);\r\n            })\r\n            .catch(error => {\r\n                this.manageError(error, reject, this.helpers.getError(error));\r\n            });\r\n    }\r\n\r\n    private logged(userName: string, resolve: Function, reject: Function) {\r\n        this.state.userName = userName;\r\n        // get a new token for the session lifecycle\r\n        this.setXhrf(resolve, reject);\r\n    }\r\n\r\n    private manageError(error: HttpResponseMessage, reject: Function, exception: Error) {\r\n        this.xhrf = undefined;\r\n        reject(exception);        \r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\nimport { Router, Redirect, NavigationInstruction, RouterConfiguration, Next, RouteConfig } from 'aurelia-router';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { HttpClient } from 'aurelia-http-client';\r\nimport environment from './environment';\r\n\r\nimport { ConnectionState } from './services/chat.service';\r\nimport { LoginService } from './services/login.service';\r\nimport { State } from './services/state';\r\nimport { ConnectionStateChanged } from './events/connectionStateChanged';\r\nimport { Settings } from './config/settings';\r\nimport { Helpers } from './services/helpers';\r\n\r\ninterface CustomRouteConfig extends RouteConfig {\r\n    anomymous: boolean;\r\n}\r\n\r\n@autoinject\r\nexport class App {\r\n    router: Router;\r\n    isConnected: boolean;\r\n    userName: string;\r\n    errorMessage: string;\r\n\r\n    constructor(private service: LoginService,\r\n        private ea: EventAggregator,\r\n        private state: State,\r\n        private helpers: Helpers,\r\n        settings: Settings,\r\n        http: HttpClient) {\r\n        settings.apiBaseUrl = environment.apiBaseUrl;\r\n        http.configure(\r\n            builder => builder\r\n                .withBaseUrl(environment.apiBaseUrl)\r\n                .withCredentials(true));\r\n\r\n        state.userName = sessionStorage.getItem('userName');\r\n    }\r\n\r\n    configureRouter(config: RouterConfiguration, router: Router) {\r\n        config.title = 'Chatle';        \r\n        config.addPipelineStep('authorize', AuthorizeStep);\r\n        const confirm = { route: 'confirm', name: 'confirm', moduleId: 'pages/confirm', title: 'Confirm', anomymous: true };\r\n        const login = { route: 'login', name: 'login', moduleId: 'pages/login', title: 'Login', anomymous: true };\r\n        const account = { route: 'account', name: 'account', moduleId: 'pages/account', title: 'Account' };\r\n        const home = { route: 'home', name: 'home', moduleId: 'pages/home', title: 'Home' }; \r\n\r\n        config.map([\r\n            home,\r\n            account,\r\n            confirm,\r\n            login\r\n        ]);\r\n\r\n        let handleUnknownRoutes = (instruction: NavigationInstruction): RouteConfig => {\r\n            const provider = this.helpers.getUrlParameter('p');\r\n\r\n            if (provider) {\r\n                return confirm;\r\n            }\r\n\r\n            const userName = this.helpers.getUrlParameter('u');\r\n            const action = this.helpers.getUrlParameter('a');\r\n \r\n            if (userName) {\r\n                this.state.userName = userName;\r\n                sessionStorage.setItem('userName', userName);\r\n            }\r\n \r\n            window.history.replaceState(null, null, '/');\r\n\r\n            if (!this.state.userName) {\r\n                return login;\r\n            }\r\n            \r\n            if (action) {\r\n                return account;\r\n            }\r\n\r\n            return home;\r\n        }\r\n\r\n        config.mapUnknownRoutes(handleUnknownRoutes)\r\n        this.router = router;\r\n    }\r\n\r\n    attached() {\r\n        this.ea.subscribe(ConnectionStateChanged, e => {\r\n            this.setIsConnected();\r\n        });\r\n        this.setIsConnected();\r\n    }\r\n\r\n    logoff() {\r\n        this.service.logoff();\r\n        this.router.navigateToRoute('login');\r\n        this.isConnected = false;\r\n    }\r\n\r\n    manage() {\r\n        this.router.navigateToRoute('account');\r\n    }\r\n\r\n    home() {\r\n        if (this.isConnected) {\r\n            this.router.navigateToRoute('home');\r\n        } else {\r\n            this.router.navigateToRoute('login');\r\n        }\r\n    }\r\n\r\n    private setIsConnected() {\r\n        this.isConnected = this.state.userName !== undefined \r\n            && this.state.userName != null\r\n            && this.router.currentInstruction.config.moduleId != 'pages/confirm';\r\n\r\n        this.userName = this.state.userName;\r\n    }\r\n\r\n}\r\n\r\n@autoinject\r\nclass AuthorizeStep {\r\n\r\n    constructor(private state: State, private helpers: Helpers) { }\r\n\r\n    run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\r\n        if (navigationInstruction.getAllInstructions().some(i => {\r\n            let route = i.config as CustomRouteConfig;\r\n            return !route.anomymous;\r\n        })) {            \r\n            let isLoggedIn = this.state.userName;\r\n            if (!isLoggedIn) {\r\n                return next.cancel(new Redirect('login'));\r\n            }\r\n        }\r\n\r\n        return next();\r\n    }\r\n}","import { Aurelia, LogManager } from 'aurelia-framework'\r\nimport {ConsoleAppender} from 'aurelia-logging-console';\r\nimport environment from './environment';\r\n\r\nif (environment.debug) {\r\n    LogManager.addAppender(new ConsoleAppender());\r\n    LogManager.setLevel(LogManager.logLevel.debug);\r\n}\r\n\r\n//Configure Bluebird Promises.\r\n//Note: You may want to use environment-specific configuration.\r\n(<any>Promise).config({\r\n  warnings: {\r\n    wForgottenReturn: false\r\n  }\r\n});\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources')\r\n    .plugin('aurelia-validation');\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import { HttpClient } from 'aurelia-http-client';\r\nimport { autoinject } from 'aurelia-framework';\r\n\r\nimport { Settings } from '../config/settings';\r\nimport { State } from './state'\r\n\r\nimport { User } from '../model/user';\r\n\r\n@autoinject\r\nexport class UserService {\r\n\r\n    constructor(private http: HttpClient, \r\n        private settings: Settings,\r\n        private state: State) { }\r\n\r\n    getUsers(): Promise<User[]> {\r\n        return new Promise<User[]>((resolve, reject) => {\r\n            this.http.get(this.settings.userAPI)\r\n                .then(response => {\r\n                        var data = response.content;\r\n                        if (data && data.users) {\r\n                            resolve(<User[]>data.users);\r\n                        }\r\n                    })\r\n                .catch(error => reject(new Error('the service is down')));\r\n        });\r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\n\r\nimport { ConnectionState } from '../services/chat.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { ChatService } from '../services/chat.service';\r\n\r\nimport { User } from '../model/user';\r\nimport { UserConnected } from '../events/userConnected'\r\nimport { UserDisconnected } from '../events/userDisconnected'\r\nimport { ConnectionStateChanged } from '../events/connectionStateChanged';\r\n\r\n@autoinject\r\nexport class ContactList {\r\n    users: User[];\r\n    loadingMessage = \"loading...\";\r\n    private userConnectedSubscription: Subscription;\r\n    private userDisconnectedSubscription: Subscription;\r\n    private connectionStateChangeSubscription: Subscription;\r\n\r\n    constructor(private userService: UserService,\r\n        private chatService: ChatService,\r\n        private ea: EventAggregator) { }\r\n\r\n    attached() {\r\n        this.connectionStateChangeSubscription = this.ea.subscribe(ConnectionStateChanged, e => {\r\n            if ((<ConnectionStateChanged>e).state === ConnectionState.Connected) {\r\n                this.getUser();\r\n            }            \r\n        });\r\n\r\n        if (this.chatService.currentState === ConnectionState.Connected) {\r\n            this.getUser();\r\n        }        \r\n    }\r\n\r\n    detached() {\r\n        this.connectionStateChangeSubscription.dispose();\r\n        if (this.userConnectedSubscription) {\r\n            this.userConnectedSubscription.dispose();\r\n        }\r\n        if (this.userDisconnectedSubscription) {\r\n            this.userDisconnectedSubscription.dispose();\r\n        }\r\n    }\r\n\r\n    private getUser() {\r\n        this.userService.getUsers()\r\n            .then(users => {\r\n                this.users = users;\r\n\r\n                this.userConnectedSubscription = this.ea.subscribe(UserConnected, e => {\r\n                    let userConnected = <UserConnected>e;\r\n                    this.removeUser(userConnected.user.id);\r\n                    this.users.unshift(userConnected.user);\r\n                });\r\n\r\n                this.userDisconnectedSubscription = this.ea.subscribe(UserDisconnected, e => {\r\n                    this.removeUser((<UserDisconnected>e).user.id);\r\n                });\r\n            })\r\n            .catch((error:Error) => this.loadingMessage = error.message);\r\n    }\r\n\r\n    private removeUser(id: string) {\r\n        let user: User;\r\n        this.users.forEach(u => {\r\n            if (u.id === id) {\r\n                user = u;\r\n            }\r\n        });\r\n\r\n        if (user) {\r\n            let index = this.users.indexOf(user);\r\n            this.users.splice(index, 1);\r\n        }        \r\n    }\r\n}","import { Conversation } from '../model/conversation';\r\n\r\nexport class ConversationSelected {\r\n    constructor(public conversation: Conversation) { }\r\n}","import { Router } from 'aurelia-router';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { HttpClient } from 'aurelia-http-client';\r\nimport { autoinject } from 'aurelia-framework';\r\n\r\nimport { Settings } from '../config/settings';\r\nimport { State } from './state'\r\nimport { Helpers } from './helpers'\r\n\r\nimport { Message } from '../model/message';\r\nimport { Conversation } from '../model/conversation';\r\nimport { Attendee } from '../model/attendee';\r\n\r\nimport { ConversationSelected } from '../events/conversationSelected';\r\nimport { ConversationJoined } from '../events/conversationJoined';\r\n\r\n@autoinject\r\nexport class ConversationService {\r\n    currentConversation: Conversation;\r\n\r\n    constructor(private http: HttpClient,\r\n        private settings: Settings,\r\n        private state: State,\r\n        private helpers: Helpers,\r\n        private ea: EventAggregator) { }\r\n\r\n    showConversation(conversation: Conversation, router: Router) {\r\n        if (router.currentInstruction.fragment !== 'conversation/' + conversation.title) {\r\n            this.currentConversation = conversation;\r\n            this.helpers.setConverationTitle(conversation);\r\n            this.ea.publish(new ConversationSelected(conversation));\r\n            router.navigateToRoute('conversation', { id: conversation.title });\r\n        }        \r\n    }\r\n\r\n    sendMessage(conversation: Conversation, message: string): Promise<Message> {\r\n        let m = new Message();\r\n        m.conversationId = conversation.id;\r\n        m.from = this.state.userName;\r\n        m.text = message;\r\n\r\n        if (conversation.id) {\r\n            return new Promise<Message>((resolve, reject) => {\r\n                this.http.post(this.settings.chatAPI, {\r\n                    to: conversation.id,\r\n                    text: message\r\n                })\r\n                    .then(response => {\r\n                        conversation.messages.unshift(m);\r\n                        resolve(m);\r\n                    })\r\n                    .catch(error => reject(this.helpers.getError(error)));\r\n            });\r\n        } else {\r\n            let attendee: Attendee;\r\n            conversation.attendees.forEach(a => {\r\n                if (a.userId !== this.state.userName) {\r\n                    attendee = a;\r\n                }\r\n            });\r\n\r\n            return new Promise<Message>((resolve, reject) => {\r\n                this.http.post(this.settings.convAPI, {\r\n                    to: attendee.userId,\r\n                    text: message\r\n                })\r\n                    .then(\r\n                    response => {\r\n                        conversation.id = response.content;\r\n                        this.ea.publish(new ConversationJoined(conversation));\r\n                        conversation.messages.unshift(m);\r\n                        resolve(m);\r\n                    })\r\n                    .catch(error => reject(this.helpers.getError(error)));\r\n            });\r\n        }\r\n    }\r\n\r\n    getConversations(): Promise<Conversation[]> {\r\n        return new Promise<Conversation[]>((resolve, reject) => {\r\n            this.http.get(this.settings.chatAPI)\r\n                .then(response => {\r\n                    if (response.response) {\r\n                        let data = response.content;\r\n                        if (data) {\r\n                            let conversations = <Conversation[]>data;\r\n                            conversations.forEach(c => this.helpers.setConverationTitle(c)); \r\n                            resolve(conversations);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    resolve(null);\r\n                })\r\n                .catch(error => reject(new Error('The service is down')));\r\n        });\r\n    }\r\n}","import { bindable, autoinject } from 'aurelia-framework';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\nimport { Router } from 'aurelia-router';\r\n\r\nimport { ConversationService } from '../services/conversation.service';\r\nimport { State } from '../services/state';\r\nimport { User } from '../model/user';\r\nimport { Conversation } from '../model/conversation';\r\nimport { Attendee } from '../model/attendee';\r\nimport { Message } from '../model/message';\r\nimport { ConversationSelected } from '../events/conversationSelected';\r\n\r\n@autoinject\r\nexport class Contact {\r\n    @bindable user: User;\r\n    isSelected: boolean;\r\n    private conversationSelectedSubscription: Subscription;\r\n\r\n    constructor(private service: ConversationService, \r\n        private state: State,\r\n        private ea: EventAggregator, \r\n        private router: Router) { }\r\n\r\n    get isCurrentUser() {\r\n        return this.state.userName === this.user.id; \r\n    }\r\n\r\n    select() {\r\n        if (this.isCurrentUser) {\r\n            return;\r\n        }\r\n\r\n        if (!this.user.conversation) {\r\n            this.user.conversation = new Conversation(this.user);\r\n        }\r\n\r\n        this.service.showConversation(this.user.conversation, this.router);        \r\n    }\r\n\r\n    attached() {\r\n        this.conversationSelectedSubscription = this.ea.subscribe(ConversationSelected, e => {\r\n            let conv = e.conversation as Conversation;\r\n            let attendees = conv.attendees;\r\n\r\n            this.isSelected = false;\r\n            if (attendees.length < 3) {\r\n                attendees.forEach(a => {\r\n                    if (a.userId !== this.state.userName && a.userId === this.user.id) {\r\n                        this.isSelected = true;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    detached() {\r\n        this.conversationSelectedSubscription.dispose();\r\n    }\r\n}\r\n\r\n","import { autoinject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\n\r\nimport { ConversationService } from '../services/conversation.service';\r\nimport { Conversation } from '../model/conversation';\r\n\r\n@autoinject\r\nexport class ConversationComponent {\r\n    conversation: Conversation;\r\n    message: string;\r\n\r\n    constructor(private service: ConversationService, private router: Router) {\r\n    }\r\n\r\n    activate(params, routeConfig) {\r\n        if (!params) {\r\n            delete this.service.currentConversation;\r\n        }\r\n\r\n        this.conversation = this.service.currentConversation;\r\n\r\n        if (!this.conversation) {\r\n            this.router.navigateToRoute('home');\r\n        } else {\r\n            routeConfig.navModel.setTitle(this.conversation.title);\r\n        }\r\n    }\r\n\r\n    sendMessage() {\r\n        this.service.sendMessage(this.conversation, this.message);\r\n        this.message = '';\r\n    }\r\n}\r\n\r\n","import { autoinject } from 'aurelia-framework';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\n\r\nimport { ConnectionState, Disconnected } from '../services/chat.service';\r\nimport { ConversationService } from '../services/conversation.service';\r\nimport { State } from '../services/state';\r\n\r\nimport { Conversation } from '../model/conversation';\r\nimport { ConversationJoined } from '../events/conversationJoined';\r\nimport { UserDisconnected } from '../events/userDisconnected';\r\nimport { ConnectionStateChanged } from '../events/connectionStateChanged';\r\n\r\n@autoinject\r\nexport class ConversationList {\r\n  conversations: Conversation[];\r\n  private conversationJoinedSubscription: Subscription;\r\n  private userDisconnectedSubscription: Subscription;\r\n  private connectionStateSubscription: Subscription;\r\n\r\n  constructor(private service: ConversationService,\r\n    private state: State,\r\n    private ea: EventAggregator) { }\r\n\r\n  attached() {\r\n    this.conversations = new Array<Conversation>();\r\n\r\n    this.getConversations();\r\n\r\n    this.connectionStateSubscription = this.ea.subscribe(ConnectionStateChanged, e => {\r\n      let state = (<ConnectionStateChanged>e).state;\r\n      if (state === ConnectionState.Disconnected) {\r\n        // remove conversation on log off, disconnection\r\n        this.conversations.splice(this.conversations.length);\r\n      } else if (state === ConnectionState.Connected) {\r\n        // get conversation for reconnect\r\n        this.getConversations();\r\n      }\r\n    });\r\n  }\r\n\r\n  detached() {\r\n    this.Unsubscribe();\r\n    this.connectionStateSubscription.dispose();\r\n  }\r\n\r\n  private Unsubscribe() {\r\n    if (this.conversationJoinedSubscription) {\r\n      this.conversationJoinedSubscription.dispose();\r\n    }\r\n    if (this.userDisconnectedSubscription) {\r\n      this.userDisconnectedSubscription.dispose();\r\n    }\r\n  }\r\n\r\n  private getConversations() {\r\n    this.service.getConversations()\r\n      .then(conversations => {\r\n        // Unsubscribe before in case of connection state changed to connected\r\n        this.Unsubscribe();\r\n\r\n        if (!conversations) {\r\n          return;\r\n        }\r\n        this.conversations = conversations;\r\n\r\n        this.userDisconnectedSubscription = this.ea.subscribe(UserDisconnected, e => {\r\n          this.conversations.forEach(c => {\r\n            let attendees = c.attendees;\r\n            if (attendees.length === 2) {\r\n              attendees.forEach(a => {\r\n                let user = (<UserDisconnected>e).user;\r\n                if (user.isRemoved && a.userId === user.id) {\r\n                  let index = this.conversations.indexOf(c);\r\n                  let conversation = this.conversations[index];\r\n                  this.conversations.splice(index, 1);\r\n                  if (this.service.currentConversation === conversation) {\r\n                    delete this.service.currentConversation;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          });\r\n        });\r\n\r\n        this.conversationJoinedSubscription = this.ea.subscribe(ConversationJoined, e => {\r\n          let conversation = (<ConversationJoined>e).conversation;\r\n          this.conversations.unshift(e.conversation);\r\n        });\r\n      });\r\n  }\r\n}","import { bindable, autoinject } from 'aurelia-framework';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\nimport { Router } from 'aurelia-router';\r\n\r\nimport { ConversationService } from '../services/conversation.service';\r\nimport { Conversation } from '../model/conversation';\r\nimport { Message } from '../model/message';\r\nimport { ConversationSelected } from '../events/conversationSelected';\r\nimport { MessageReceived } from '../events/messageReceived';\r\n\r\n@autoinject\r\nexport class ConversationPreview {\r\n    @bindable conversation: Conversation;\r\n    isSelected: boolean;\r\n    lastMessage: string;\r\n    \r\n    private conversationSelectedSubscription: Subscription;\r\n    private messageReceivedSubscription: Subscription;\r\n\r\n    constructor(private service: ConversationService, private ea: EventAggregator, private router: Router) { }\r\n\r\n    select() {\r\n        this.service.showConversation(this.conversation, this.router);\r\n    }\r\n\r\n    attached() {\r\n        this.lastMessage = this.conversation.messages[0].text;\r\n        this.isSelected = this.conversation && this.conversation.isInitiatedByUser;\r\n\r\n        this.conversationSelectedSubscription = this.ea.subscribe(ConversationSelected, e => {\r\n            if (e.conversation.id === this.conversation.id) {\r\n                this.isSelected = true;\r\n            } else {\r\n                this.isSelected = false;\r\n            }\r\n        });\r\n        \r\n        this.messageReceivedSubscription = this.ea.subscribe(MessageReceived, e => {\r\n            let message = (<MessageReceived>e).message;\r\n            if (message.conversationId === this.conversation.id) {                \r\n                this.conversation.messages.unshift(message);\r\n                this.lastMessage = message.text;\r\n            }\r\n        });\r\n    }\r\n\r\n    detached() {\r\n        this.conversationSelectedSubscription.dispose();\r\n        this.messageReceivedSubscription.dispose();\r\n    }\r\n}","import { customElement, autoinject, bindable, bindingMode } from 'aurelia-framework';\r\nimport { ValidationControllerFactory, ValidationController, ValidationRules } from 'aurelia-validation';\r\n\r\nimport { LoginService } from '../services/login.service';\r\nimport { State } from '../services/state';\r\n\r\n@autoinject\r\n@customElement('user-name')\r\nexport class UserName {\r\n    @bindable({ defaultBindingMode: bindingMode.twoWay })\r\n    userName: string;\r\n    controller: ValidationController;\r\n\r\n    constructor(private service: LoginService, private state: State, controllerFactory: ValidationControllerFactory) {\r\n        this.controller = controllerFactory.createForCurrentScope();\r\n        this.controller.validateTrigger = 'change';\r\n    }\r\n\r\n    attached() {\r\n        this.userName = this.state.userName;\r\n    }\r\n\r\n    userNameAvailable(value: string) {\r\n        return new Promise<boolean>(resolve => {\r\n            this.service.exists(value)\r\n                .then(r => {\r\n                    resolve(!r)\r\n                    this.state.userName = value;\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nValidationRules\r\n    .ensure((c: UserName) => c.userName)\r\n    .satisfies((value, obj) => obj.userNameAvailable(value))\r\n    .withMessage('This user name already exists, please choose another one')\r\n    .satisfiesRule('required')\r\n    .on(UserName);\r\n","import { ValidationRules } from 'aurelia-validation';\r\n\r\nexport class ChangePassword {\r\n    oldPassword: string;\r\n    newPassword: string;\r\n    confirmPassword: string;\r\n}\r\n","class UserLoginInfo {\r\n    loginProvider: string;\r\n    providerKey: string;\r\n}\r\n\r\nexport class UserLogiAuthenticationDescriptionnInfo {\r\n    authenticationScheme: string;\r\n    displayName: string;\r\n}\r\n\r\nexport class ManageLogins {\r\n    currentLogins: Array<UserLoginInfo>;\r\n    otherLogins: Array<UserLogiAuthenticationDescriptionnInfo>;    \r\n}","import { HttpClient } from 'aurelia-http-client';\r\nimport { autoinject } from 'aurelia-framework';\r\n\r\nimport { Settings } from '../config/settings';\r\nimport { State } from './state';\r\nimport { Helpers } from './helpers';\r\nimport { ManageLogins } from '../model/manage-logins'\r\n\r\nimport { ChangePassword } from '../model/changePassword';\r\n\r\n@autoinject\r\nexport class AccountService {\r\n\r\n    constructor(private http: HttpClient, \r\n        private settings: Settings,\r\n        private state: State,\r\n        private helpers: Helpers) { }\r\n\r\n    getLogins(): Promise<ManageLogins> {\r\n        return new Promise<ManageLogins>((resove, reject) => {\r\n            this.http.get(this.settings.accountdAPI + '/logins')\r\n                .then(response => {                    \r\n                    resove(response.content as ManageLogins);\r\n                })\r\n                .catch(error => reject(new Error('The service is down')));\r\n        });\r\n    }\r\n\r\n    removeLogin(loginProvider: string, providerKey: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.http.delete(this.settings.accountdAPI + '/sparemoveLogin?loginProvider=' + encodeURIComponent(loginProvider) + '&providerKey=' + encodeURIComponent(providerKey))\r\n                .then(() => {\r\n                    resolve();\r\n                })\r\n                .catch(e => reject(this.helpers.getError(e)));\r\n        });\r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\n\r\nimport { ConnectionState } from '../services/chat.service';\r\nimport { State } from '../services/state';\r\nimport { AccountService } from '../services/account.service';\r\nimport { LoginService } from '../services/login.service';\r\nimport { ChangePassword } from '../model/changePassword';\r\nimport { ManageLogins, UserLogiAuthenticationDescriptionnInfo } from '../model/manage-logins';\r\nimport { ConnectionStateChanged } from '../events/connectionStateChanged';\r\nimport { Settings } from '../config/settings';\r\nimport { Helpers } from '../services/helpers';\r\n\r\n@autoinject\r\nexport class Account {\r\n    errorMessage: string;\r\n    logins: ManageLogins;\r\n    externalLinkLogin: string;\r\n    token: string;\r\n\r\n    private connectionStateSubscription: Subscription;\r\n\r\n    constructor(private accountService: AccountService, \r\n            private loginService: LoginService,\r\n            private router: Router, \r\n            private ea: EventAggregator,\r\n            private state: State,\r\n            settings: Settings,\r\n            helpers: Helpers) {          \r\n        this.externalLinkLogin = settings.apiBaseUrl + \r\n            settings.accountdAPI + \r\n            '/linklogin?returnUrl=' + \r\n            encodeURIComponent(location.protocol + '//' + location.host + '?a=account&u=' + encodeURIComponent(this.state.userName));\r\n    }\r\n\r\n    remove(loginProvider: string, providerKey: string) {\r\n        this.accountService.removeLogin(loginProvider, providerKey)\r\n            .then(() => {\r\n                let currentLogins = this.logins.currentLogins;\r\n                const index = currentLogins.findIndex(value => value.loginProvider === loginProvider && value.providerKey === providerKey);\r\n                currentLogins.splice(index, 1);\r\n\r\n                const provider = new UserLogiAuthenticationDescriptionnInfo();\r\n                provider.authenticationScheme = provider.displayName = loginProvider;\r\n                this.logins.otherLogins.push(provider)\r\n            })\r\n            .catch((e: Error) => this.errorMessage = e.message);\r\n    }\r\n\r\n    attached() {\r\n        this.connectionStateSubscription = this.ea.subscribe(ConnectionStateChanged, e => {\r\n            if ((<ConnectionStateChanged>e).state === ConnectionState.Connected) {\r\n                this.getLogins();\r\n            }\r\n        });\r\n        \r\n        this.getLogins();\r\n    }\r\n\r\n    detached() {\r\n        this.connectionStateSubscription.dispose();\r\n    }\r\n\r\n    private getLogins() {\r\n        this.loginService.getXhrf()            \r\n            .then((token: string) => {\r\n                    this.token = token;\r\n                    this.accountService.getLogins()\r\n                        .then((logins: ManageLogins) => this.logins = logins)\r\n                        .catch((e: Error) => this.errorMessage = e.message);\r\n                })\r\n            .catch((e: Error) => this.errorMessage = e.message);\r\n    }\r\n}\r\n","import { autoinject } from 'aurelia-framework';\r\nimport { Router, NavigationInstruction } from 'aurelia-router';\r\nimport { ValidationControllerFactory, ValidationController, ValidationRules } from 'aurelia-validation';\r\n\r\nimport { LoginService } from '../services/login.service';\r\nimport { Helpers } from '../services/helpers';\r\nimport { State } from '../services/state';\r\n\r\n@autoinject\r\nexport class Confirm {\r\n    error: Error;\r\n    controller: ValidationController;\r\n    provider: string;\r\n\r\n    constructor(private service: LoginService,\r\n        private router: Router,\r\n        private helpers: Helpers,\r\n        private state: State,\r\n        controllerFactory: ValidationControllerFactory) {\r\n        this.controller = controllerFactory.createForCurrentScope();\r\n        this.provider = this.helpers.getUrlParameter('p');\r\n        state.userName = this.helpers.getUrlParameter('u');\r\n\r\n        window.history.replaceState(null, null, '/');\r\n    }\r\n\r\n    confirm() {\r\n        this.controller.validate()\r\n            .then(() => {\r\n                this.service.confirm(this.state.userName)\r\n                    .then(() => {\r\n                        this.router.navigateToRoute('home');\r\n                    })\r\n                    .catch((e: Error) => {\r\n                        if (e.name === 'NullInfo') {\r\n                            this.router.navigateToRoute('login');\r\n                        } else {\r\n                            this.error = e;\r\n                        }\r\n                    });\r\n            })\r\n            .catch(e => this.error = e);\r\n    }\r\n}\r\n","import { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\n\r\nimport { Message } from '../model/message';\r\nimport { MessageReceived } from '../events/messageReceived';\r\n\r\ninterface NotificationOptions {\r\n    dir?: string;\r\n    lang?: string;\r\n    body?: string;\r\n    tag?: string;\r\n    icon?: string;\r\n    data?: any;\r\n    vibrate?: number[];\r\n    renotify?: boolean;\r\n    silent?: boolean;\r\n    sound?: string;\r\n    noscreen?: boolean;\r\n    sticky?: boolean;\r\n}\r\n\r\ninterface Notification {\r\n    readonly title: string;\r\n    readonly dir: string;\r\n    readonly lang: string;\r\n    readonly body: string;\r\n    readonly tag: string;\r\n    readonly icon: string;\r\n    readonly data: any;\r\n    readonly silent: boolean;\r\n    readonly timestamp: string;\r\n    readonly noscreen: boolean;\r\n    readonly renotify: boolean;\r\n    readonly sound: string;\r\n    readonly sticky: boolean;\r\n    readonly vibrate: number[];\r\n    onclick: Function;\r\n    onerror: Function;\r\n    close(): void;\r\n}\r\n\r\ndeclare var Notification: {\r\n    prototype: Notification;\r\n    readonly permission: string;\r\n    new(title: string, options?: NotificationOptions): Notification;\r\n    requestPermission(): Promise<string>;\r\n}\r\n\r\nexport class NotificationService {\r\n    private subscription: Subscription;\r\n\r\n    constructor(private ea: EventAggregator) { }\r\n\r\n    start() {\r\n        if (window['Notification']) {\r\n            if (Notification.permission === 'granted') {\r\n                this.listen();\r\n            } else if (Notification.permission !== 'denied') {\r\n                Notification\r\n                    .requestPermission()\r\n                    .then(permission => {\r\n                        if (permission === 'granted') {\r\n                            this.listen();\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.subscription) {\r\n            this.subscription.dispose();\r\n        }\r\n    }\r\n\r\n    private listen() {\r\n        this.subscription = this.ea.subscribe(MessageReceived, e => {\r\n            const message = (<MessageReceived>e).message;\r\n            const option = {\r\n                body: message.text,\r\n                icon: \"favicon.ico\"\r\n            }\r\n\r\n            const n = new Notification(message.from, option);\r\n            n.onclick = () => {\r\n\r\n            }\r\n        });\r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\nimport { Router, RouterConfiguration } from 'aurelia-router';\r\nimport { EventAggregator, Subscription } from 'aurelia-event-aggregator';\r\n\r\nimport { ChatService, ConnectionState } from '../services/chat.service';\r\nimport { LoginService } from '../services/login.service';\r\nimport { NotificationService } from '../services/notification.service';\r\nimport { ConnectionStateChanged } from '../events/connectionStateChanged';\r\n\r\n@autoinject\r\nexport class Home {\r\n    router: Router;\r\n    isDisconnected: boolean;\r\n\r\n    private connectionStateSubscription: Subscription;\r\n    private showConversationSubscription: Subscription;\r\n    private notification: NotificationService;\r\n\r\n    constructor(private chatService: ChatService,\r\n        private ea: EventAggregator) { \r\n            this.notification = new NotificationService(ea);\r\n        }\r\n\r\n    configureRouter(config: RouterConfiguration, router: Router) {\r\n        config.map([\r\n            { route: ['', 'conversation/:id'], name: 'conversation', moduleId: '../components/conversation-component' }\r\n        ]);\r\n\r\n        this.router = router;\r\n    }\r\n\r\n    attached() {\r\n        this.connectionStateSubscription = this.ea.subscribe(ConnectionStateChanged, e => {\r\n            this.setIsDisconnected((<ConnectionStateChanged>e).state);\r\n        });\r\n\r\n        this.setIsDisconnected(this.chatService.currentState);\r\n\r\n        if (this.chatService.currentState !== ConnectionState.Connected) {\r\n            this.chatService.start();\r\n        }\r\n    }\r\n\r\n    detached() {\r\n        this.connectionStateSubscription.dispose();\r\n    }\r\n\r\n    private setIsDisconnected(state: ConnectionState) {\r\n        if (state === ConnectionState.Error) {\r\n            this.router.navigateToRoute('login');\r\n            this.notification.stop();\r\n        } if (state === ConnectionState.Disconnected) {\r\n            this.isDisconnected = true;\r\n            this.notification.stop();\r\n        } else {\r\n            this.isDisconnected = false;\r\n            this.notification.start();\r\n        }\r\n    }\r\n}","import { autoinject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\n\r\nimport { LoginService } from '../services/login.service';\r\nimport { Settings } from '../config/settings';\r\nimport { State } from '../services/state';\r\nimport { Provider } from '../model/provider';\r\nimport environment from '../environment';\r\n\r\n@autoinject\r\nexport class Login {\r\n    error: Error;\r\n    externalLogin: string;\r\n    token: string;\r\n    providers: Array<Provider>;\r\n    \r\n    constructor(private service: LoginService, private router: Router, private state: State, settings: Settings) {\r\n        let location = window.location; \r\n        this.externalLogin = settings.apiBaseUrl + \r\n            settings.accountdAPI + \r\n            '/externalLogin?returnUrl=' + \r\n            encodeURIComponent(location.protocol + '//' + location.host + environment.redirectPath);\r\n    }\r\n\r\n    login() {        \r\n        this.service.login(this.state.userName)\r\n            .then(() => {\r\n                this.router.navigateToRoute('home');\r\n            })\r\n            .catch((error: Error) => {\r\n                this.error = error;\r\n            });\r\n    }\r\n\r\n    activate() {\r\n        this.service.logoff();\r\n        this.service.getXhrf(true)\r\n            .then(t => {\r\n                this.token = t;\r\n                this.service.getExternalLoginProviders()\r\n                    .then(providers => this.providers = providers)\r\n                    .catch(e => this.error = e);\r\n            })\r\n            .catch(e => \r\n                this.error = e);\r\n    }\r\n\r\n    \r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\r\n\r\nexport function configure(config: FrameworkConfiguration) {\r\n  //config.globalResources([]);\r\n}\r\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}